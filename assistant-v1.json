{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0",
    "title": "Watson Assistant v1",
    "description": "The IBM Watson&trade; Assistant service combines machine learning, natural language understanding, and an integrated dialog editor to create conversation flows between your apps and your users.\n\nThe Assistant v1 API provides authoring methods your application can use to create or update a workspace.",
    "x-version-date": "2021-11-27",
    "x-vcap-service-name": "conversation",
    "x-alternate-name": "Assistant",
    "x-sdk-supported-languages": [
      "java",
      "node",
      "python",
      "dotnet-standard"
    ],
    "x-codegen-config": {
      "includeExternalConfig": true,
      "supportNodeCallbacks": true,
      "dotnet-standard": {
        "apiPackage": "IBM.Watson"
      },
      "go": {
        "apiPackage": "github.com/watson-developer-cloud/go-sdk/v2"
      },
      "cli": {
        "apiPackage": "cli-watson-plugin",
        "cliPluginName": "watson",
        "serviceCommandName": "assistant-v1"
      },
      "java": {
        "apiPackage": "com.ibm.watson"
      },
      "python": {
        "apiPackage": "ibm_watson"
      },
      "swift": {
        "resterror-alias": "WatsonError",
        "restresponse-alias": "WatsonResponse"
      }
    },
    "x-last-updated": "2023-05-25"
  },
  "security": [
    {
      "IAM": []
    }
  ],
  "externalDocs": {
    "description": "For more information about this service, see the docs.",
    "url": "https://cloud.ibm.com/docs/assistant",
    "x-information-security": "https://cloud.ibm.com/docs/assistant?topic=assistant-information-security",
    "x-release-notes": "https://cloud.ibm.com/docs/assistant?topic=assistant-release-notes"
  },
  "x-doc-properties": [
    "assistantAccessControl",
    "assistantDataCollection",
    "assistantV1DataCollection",
    "hasCustomEndpoints",
    "hasDataLabels",
    "hasNextVersion",
    "hasPagination",
    "hasRateLimiting",
    "hasRelatedApis",
    "mergedDefinition"
  ],
  "x-rate-limit-enabled": true,
  "tags": [
    {
      "name": "Message",
      "description": "Send user input to a workspace and receive a response."
    },
    {
      "name": "Bulk classify",
      "description": "Identify intents and entities in multiple user utterances."
    },
    {
      "name": "Workspaces",
      "description": "Create, update, and manage workspaces."
    },
    {
      "name": "Intents",
      "description": "Create, update, and manage intents."
    },
    {
      "name": "Examples",
      "description": "Create, update, and manage intent user input examples."
    },
    {
      "name": "Counterexamples",
      "description": "Create, update, and manage user input examples that are marked as irrelevant input."
    },
    {
      "name": "Entities",
      "description": "Create, update, and manage entities."
    },
    {
      "name": "Mentions",
      "description": "Create, update, and manage entity mentions in the context of user input examples."
    },
    {
      "name": "Values",
      "description": "Create, update, and manage entity values."
    },
    {
      "name": "Synonyms",
      "description": "Create, update, and manage entity value synonyms."
    },
    {
      "name": "Dialog nodes",
      "description": "Create, update, and manage dialog nodes."
    },
    {
      "name": "Logs",
      "description": "Query logged user input and responses."
    },
    {
      "name": "User data",
      "description": "Delete data that has been labeled with a customer ID."
    }
  ],
  "paths": {
    "/v1/workspaces/{workspace_id}/counterexamples": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspacePathParam"
        },
        {
          "$ref": "#/components/parameters/VersionQueryParam"
        }
      ],
      "get": {
        "operationId": "listCounterexamples",
        "summary": "List counterexamples",
        "description": "List the counterexamples for a workspace. Counterexamples are examples that have been marked as irrelevant input.",
        "x-rate-limit": "This operation is limited to 2500 requests per 30 minutes.",
        "tags": [
          "Counterexamples"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageLimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/IncludeCountQueryParam"
          },
          {
            "in": "query",
            "name": "sort",
            "required": false,
            "description": "The attribute by which returned counterexamples will be sorted. To reverse the sort order, prefix the value with a minus sign (`-`).",
            "schema": {
              "type": "string",
              "enum": [
                "text",
                "updated"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/CursorQueryParam"
          },
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CounterexampleCollection"
                },
                "examples": {
                  "response": {
                    "value": {
                      "counterexamples": [
                        {
                          "text": "What are you wearing?"
                        }
                      ],
                      "pagination": {
                        "refresh_url": "/v1/workspaces/9978a49e-ea89-4493-b33d-82298d3db20d/counterexamples?version=2021-11-27"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -u \"apikey:{apikey}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/counterexamples?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Authorization: Bearer {token}\" \"{url}/v1/workspaces/{workspace_id}/counterexamples?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.ListCounterexamples(\n",
                      "    workspaceId: \"{workspaceId}\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.ListCounterexamples(\n",
                      "    workspaceId: \"{workspaceId}\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "\n",
                      "ListCounterexamplesOptions options = new ListCounterexamplesOptions.Builder(workspaceId).build();\n",
                      "\n",
                      "CounterexampleCollection response = assistant.listCounterexamples(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "\n",
                      "ListCounterexamplesOptions options = new ListCounterexamplesOptions.Builder(workspaceId).build();\n",
                      "\n",
                      "CounterexampleCollection response = assistant.listCounterexamples(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}'\n",
                      "};\n",
                      "\n",
                      "assistant.listCounterexamples(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}'\n",
                      "};\n",
                      "\n",
                      "assistant.listCounterexamples(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.list_counterexamples(\n",
                      "    workspace_id='{workspace_id}'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.list_counterexamples(\n",
                      "    workspace_id='{workspace_id}'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "post": {
        "operationId": "createCounterexample",
        "summary": "Create counterexample",
        "description": "Add a new counterexample to a workspace. Counterexamples are examples that have been marked as irrelevant input.\n\nIf you want to add multiple counterexamples with a single API call, consider using the **[Update workspace](#update-workspace)** method instead.",
        "x-rate-limit": "This operation is limited to 1000 requests per 30 minutes.",
        "tags": [
          "Counterexamples"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Counterexample"
              }
            }
          },
          "description": "The content of the new counterexample.",
          "required": true
        },
        "x-codegen-request-body-name": "body",
        "responses": {
          "201": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Counterexample"
                },
                "examples": {
                  "response": {
                    "value": {
                      "text": "Make me a sandwich"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" \\\n",
                      "--header \"Content-Type: application/json\" \\\n",
                      "--data \"{\\\"text\\\":\\\"Make me a sandwich\\\"}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/counterexamples?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Content-Type: application/json\" -X POST -H \"Authorization: Bearer {token}\" -d \"{\\\"text\\\":\\\"Make me a sandwich\\\"}\" \"{url}/v1/workspaces/{workspace_id}/counterexamples?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.CreateCounterexample(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    text: \"Make me a sandwich\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);\n",
                      "\n",
                      "counterexample = result.Result.Text;"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.CreateCounterexample(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    text: \"Make me a sandwich\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);\n",
                      "\n",
                      "counterexample = result.Result.Text;"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String text = \"Make me a sandwich\";\n",
                      "\n",
                      "CreateCounterexampleOptions options = new CreateCounterexampleOptions.Builder(workspaceId, text).build();\n",
                      "\n",
                      "Counterexample response = assistant.createCounterexample(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String text = \"Make me a sandwich\";\n",
                      "\n",
                      "CreateCounterexampleOptions options = new CreateCounterexampleOptions.Builder(workspaceId, text).build();\n",
                      "\n",
                      "Counterexample response = assistant.createCounterexample(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  text: 'Make me a sandwich'\n",
                      "};\n",
                      "\n",
                      "assistant.createCounterexample(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  text: 'Make me a sandwich'\n",
                      "};\n",
                      "\n",
                      "assistant.createCounterexample(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.create_counterexample(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    text='Make me a sandwich'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.create_counterexample(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    text='Make me a sandwich'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/workspaces/{workspace_id}/counterexamples/{text}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspacePathParam"
        },
        {
          "in": "path",
          "name": "text",
          "required": true,
          "description": "The text of a user input counterexample (for example, `What are you wearing?`).",
          "schema": {
            "type": "string"
          }
        },
        {
          "$ref": "#/components/parameters/VersionQueryParam"
        }
      ],
      "get": {
        "operationId": "getCounterexample",
        "summary": "Get counterexample",
        "description": "Get information about a counterexample. Counterexamples are examples that have been marked as irrelevant input.",
        "x-rate-limit": "This operation is limited to 6000 requests per 5 minutes.",
        "tags": [
          "Counterexamples"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Counterexample"
                },
                "examples": {
                  "response": {
                    "value": {
                      "text": "What are you wearing?"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -u \"apikey:{apikey}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/counterexamples/What%20are%20you%20wearing%3F?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Authorization: Bearer {token}\" \"{url}/v1/workspaces/{workspace_id}/counterexamples/What%20are%20you%20wearing%3F?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.GetCounterexample(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    text: \"What are you wearing?\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.GetCounterexample(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    text: \"What are you wearing?\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String text = \"What are you wearing?\";\n",
                      "\n",
                      "GetCounterexampleOptions options = new GetCounterexampleOptions.Builder(workspaceId, text).build();\n",
                      "\n",
                      "Counterexample response = assistant.getCounterexample(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String text = \"What are you wearing?\";\n",
                      "\n",
                      "GetCounterexampleOptions options = new GetCounterexampleOptions.Builder(workspaceId, text).build();\n",
                      "\n",
                      "Counterexample response = assistant.getCounterexample(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  text: 'What are you wearing?'\n",
                      "};\n",
                      "\n",
                      "assistant.getCounterexample(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  text: 'What are you wearing?'\n",
                      "};\n",
                      "\n",
                      "assistant.getCounterexample(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.get_counterexample(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    text='What are you wearing?'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.get_counterexample(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    text='What are you wearing?'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "post": {
        "operationId": "updateCounterexample",
        "summary": "Update counterexample",
        "description": "Update the text of a counterexample. Counterexamples are examples that have been marked as irrelevant input.",
        "x-rate-limit": "This operation is limited to 1000 requests per 30 minutes.",
        "tags": [
          "Counterexamples"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCounterexample"
              }
            }
          },
          "description": "The text of the counterexample.",
          "required": true
        },
        "x-codegen-request-body-name": "body",
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Counterexample"
                },
                "examples": {
                  "response": {
                    "value": {
                      "text": "Make me a cheeseburger"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" \\\n",
                      "--header \"Content-Type: application/json\" \\\n",
                      "--data \"{\\\"text\\\":\\\"Make me a cheeseburger\\\"}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/counterexamples/Make%20me%20a%20sandwich?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Content-Type: application/json\" -X POST -H \"Authorization: Bearer {token}\" -d \"{\\\"text\\\":\\\"Make me a cheeseburger\\\"}\" \"{url}/v1/workspaces/{workspace_id}/counterexamples/Make%20me%20a%20sandwich?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.UpdateCounterexample(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    text: \"Make me a sandwich\",\n",
                      "    newText: \"Make me a cheeseburger\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.UpdateCounterexample(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    text: \"Make me a sandwich\",\n",
                      "    newText: \"Make me a cheeseburger\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String text = \"Make me a sandwich\";\n",
                      "String newText = \"Make me a cheeseburger\";\n",
                      "\n",
                      "UpdateCounterexampleOptions options = new UpdateCounterexampleOptions.Builder(workspaceId, text)\n",
                      "  .newText(newText)\n",
                      "  .build();\n",
                      "\n",
                      "Counterexample response = assistant.updateCounterexample(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String text = \"Make me a sandwich\";\n",
                      "String newText = \"Make me a cheeseburger\";\n",
                      "\n",
                      "UpdateCounterexampleOptions options = new UpdateCounterexampleOptions.Builder(workspaceId, text)\n",
                      "  .newText(newText)\n",
                      "  .build();\n",
                      "\n",
                      "Counterexample response = assistant.updateCounterexample(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  text: 'Make me a sandwich',\n",
                      "  newText: 'Make me a cheeseburger'\n",
                      "};\n",
                      "\n",
                      "assistant.updateCounterexample(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  text: 'Make me a sandwich',\n",
                      "  newText: 'Make me a cheeseburger'\n",
                      "};\n",
                      "\n",
                      "assistant.updateCounterexample(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.update_counterexample(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    text='Make me a sandwich',\n",
                      "    new_text='Make me a cheeseburger'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.update_counterexample(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    text='Make me a sandwich',\n",
                      "    new_text='Make me a cheeseburger'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "operationId": "deleteCounterexample",
        "summary": "Delete counterexample",
        "description": "Delete a counterexample from a workspace. Counterexamples are examples that have been marked as irrelevant input.",
        "x-rate-limit": "This operation is limited to 1000 requests per 30 minutes.",
        "tags": [
          "Counterexamples"
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE -u \"apikey:{apikey}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/counterexamples/Make%20me%20a%20sandwich?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE -H \"Authorization: Bearer {token}\" \"{url}/v1/workspaces/{workspace_id}/counterexamples/Make%20me%20a%20sandwich?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.DeleteCounterexample(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    text: \"Make me a sandwich\"\n",
                      ");\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.DeleteCounterexample(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    text: \"Make me a sandwich\"\n",
                      ");\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String text = \"Make me a sandwich\";\n",
                      "\n",
                      "DeleteCounterexampleOptions options = new DeleteCounterexampleOptions.Builder(workspaceId, text).build();\n",
                      "\n",
                      "assistant.deleteCounterexample(options).execute();"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String text = \"Make me a sandwich\";\n",
                      "\n",
                      "DeleteCounterexampleOptions options = new DeleteCounterexampleOptions.Builder(workspaceId, text).build();\n",
                      "\n",
                      "assistant.deleteCounterexample(options).execute();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  text: 'Make me a sandwich'\n",
                      "};\n",
                      "\n",
                      "assistant.deleteCounterexample(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  text: 'Make me a sandwich'\n",
                      "};\n",
                      "\n",
                      "assistant.deleteCounterexample(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.delete_counterexample(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    text='Make me a sandwich'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.delete_counterexample(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    text='Make me a sandwich'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/workspaces/{workspace_id}/entities": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspacePathParam"
        },
        {
          "$ref": "#/components/parameters/VersionQueryParam"
        }
      ],
      "get": {
        "operationId": "listEntities",
        "summary": "List entities",
        "description": "List the entities for a workspace.",
        "x-rate-limit": "With **export**=`false`, this operation is limited to 1000 requests per 30 minutes. With **export**=`true`, the limit is 200 requests per 30 minutes.",
        "tags": [
          "Entities"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ExportQueryParam"
          },
          {
            "$ref": "#/components/parameters/PageLimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/IncludeCountQueryParam"
          },
          {
            "in": "query",
            "name": "sort",
            "required": false,
            "description": "The attribute by which returned entities will be sorted. To reverse the sort order, prefix the value with a minus sign (`-`).",
            "schema": {
              "type": "string",
              "enum": [
                "entity",
                "updated"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/CursorQueryParam"
          },
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityCollection"
                },
                "examples": {
                  "response": {
                    "value": {
                      "entities": [
                        {
                          "entity": "animal"
                        }
                      ],
                      "pagination": {
                        "refresh_url": "/v1/workspaces/bec28d8f-18c1-4e97-8d08-9c842c658b51/entities?version=2021-11-27"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -u \"apikey:{apikey}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/entities?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Authorization: Bearer {token}\" \"{url}/v1/workspaces/{workspace_id}/entities?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.ListEntities(\n",
                      "    workspaceId: \"{workspaceId}\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.ListEntities(\n",
                      "    workspaceId: \"{workspaceId}\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "\n",
                      "ListEntitiesOptions options = new ListEntitiesOptions.Builder(workspaceId).build();\n",
                      "\n",
                      "EntityCollection response = assistant.listEntities(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "\n",
                      "ListEntitiesOptions options = new ListEntitiesOptions.Builder(workspaceId).build();\n",
                      "\n",
                      "EntityCollection response = assistant.listEntities(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}'\n",
                      "};\n",
                      "\n",
                      "assistant.listEntities(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}'\n",
                      "};\n",
                      "\n",
                      "assistant.listEntities(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.list_entities(\n",
                      "    workspace_id='{workspace_id}'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.list_entities(\n",
                      "    workspace_id='{workspace_id}'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "post": {
        "operationId": "createEntity",
        "summary": "Create entity",
        "description": "Create a new entity, or enable a system entity.\n\nIf you want to create multiple entities with a single API call, consider using the **[Update workspace](#update-workspace)** method instead.",
        "x-rate-limit": "This operation is limited to 1000 requests per 30 minutes.",
        "tags": [
          "Entities"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEntity"
              }
            }
          },
          "description": "The content of the new entity.",
          "required": true
        },
        "x-codegen-request-body-name": "body",
        "responses": {
          "201": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entity"
                },
                "examples": {
                  "response": {
                    "value": {
                      "entity": "beverage"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" \\\n",
                      "--header \"Content-Type: application/json\" \\\n",
                      "--data \"{\\\"entity\\\": \\\"beverage\\\",\\\"values\\\":[{\\\"value\\\":\\\"water\\\"},{\\\"value\\\":\\\"orange juice\\\"},{\\\"value\\\":\\\"soda\\\"}]}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/entities?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Content-Type: application/json\" -X POST -H \"Authorization: Bearer {token}\" -d \"{\\\"entity\\\": \\\"beverage\\\",\\\"values\\\":[{\\\"value\\\":\\\"water\\\"},{\\\"value\\\":\\\"orange juice\\\"},{\\\"value\\\":\\\"soda\\\"}]}\" \"{url}/v1/workspaces/{workspace_id}/entities?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.CreateEntity(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    entity: \"beverage\",\n",
                      "    values: new List<CreateValue>()\n",
                      "    {\n",
                      "        new CreateValue()\n",
                      "        {\n",
                      "            Value = \"water\"\n",
                      "        },\n",
                      "        new CreateValue()\n",
                      "        {\n",
                      "            Value = \"orange juice\"\n",
                      "        },\n",
                      "        new CreateValue()\n",
                      "        {\n",
                      "            Value = \"soda\"\n",
                      "        }\n",
                      "    }\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.CreateEntity(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    entity: \"beverage\",\n",
                      "    values: new List<CreateValue>()\n",
                      "    {\n",
                      "        new CreateValue()\n",
                      "        {\n",
                      "            Value = \"water\"\n",
                      "        },\n",
                      "        new CreateValue()\n",
                      "        {\n",
                      "            Value = \"orange juice\"\n",
                      "        },\n",
                      "        new CreateValue()\n",
                      "        {\n",
                      "            Value = \"soda\"\n",
                      "        }\n",
                      "    }\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String entityName = \"beverage\";\n",
                      "\n",
                      "List<CreateValue> entityValues = new ArrayList<CreateValue>();\n",
                      "entityValues.add(new CreateValue.Builder(\"water\").build());\n",
                      "entityValues.add(new CreateValue.Builder(\"orange juice\").build());\n",
                      "entityValues.add(new CreateValue.Builder(\"soda\").build());\n",
                      "\n",
                      "CreateEntityOptions options = new CreateEntityOptions.Builder(workspaceId, entityName)\n",
                      "  .values(entityValues)\n",
                      "  .build();\n",
                      "\n",
                      "Entity response = assistant.createEntity(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String entityName = \"beverage\";\n",
                      "\n",
                      "List<CreateValue> entityValues = new ArrayList<CreateValue>();\n",
                      "entityValues.add(new CreateValue.Builder(\"water\").build());\n",
                      "entityValues.add(new CreateValue.Builder(\"orange juice\").build());\n",
                      "entityValues.add(new CreateValue.Builder(\"soda\").build());\n",
                      "\n",
                      "CreateEntityOptions options = new CreateEntityOptions.Builder(workspaceId, entityName)\n",
                      "  .values(entityValues)\n",
                      "  .build();\n",
                      "\n",
                      "Entity response = assistant.createEntity(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  entity: 'beverage',\n",
                      "  values: [\n",
                      "    {\n",
                      "      value: 'water'\n",
                      "    },\n",
                      "    {\n",
                      "      value: 'orange juice'\n",
                      "    },\n",
                      "    {\n",
                      "      value: 'soda'\n",
                      "    }\n",
                      "  ]\n",
                      "};\n",
                      "\n",
                      "assistant.createEntity(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  entity: 'beverage',\n",
                      "  values: [\n",
                      "    {\n",
                      "      value: 'water'\n",
                      "    },\n",
                      "    {\n",
                      "      value: 'orange juice'\n",
                      "    },\n",
                      "    {\n",
                      "      value: 'soda'\n",
                      "    }\n",
                      "  ]\n",
                      "};\n",
                      "\n",
                      "assistant.createEntity(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.create_entity(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    entity='beverage',\n",
                      "    values=[\n",
                      "        {'value': 'water'},\n",
                      "        {'value': 'orange juice'},\n",
                      "        {'value': 'soda'}\n",
                      "    ]\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.create_entity(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    entity='beverage',\n",
                      "    values=[\n",
                      "        {'value': 'water'},\n",
                      "        {'value': 'orange juice'},\n",
                      "        {'value': 'soda'}\n",
                      "    ]\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/workspaces/{workspace_id}/entities/{entity}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspacePathParam"
        },
        {
          "$ref": "#/components/parameters/EntityPathParam"
        },
        {
          "$ref": "#/components/parameters/VersionQueryParam"
        }
      ],
      "get": {
        "operationId": "getEntity",
        "summary": "Get entity",
        "description": "Get information about an entity, optionally including all entity content.",
        "x-rate-limit": "With **export**=`false`, this operation is limited to 6000 requests per 5 minutes. With **export**=`true`, the limit is 200 requests per 30 minutes.",
        "tags": [
          "Entities"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ExportQueryParam"
          },
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entity"
                },
                "examples": {
                  "response": {
                    "value": {
                      "entity": "beverage"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -u \"apikey:{apikey}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/entities/beverage?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Authorization: Bearer {token}\" \"{url}/v1/workspaces/{workspace_id}/entities/beverage?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.GetEntity(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    entity: \"beverage\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.GetEntity(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    entity: \"beverage\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String entityName = \"beverage\";\n",
                      "\n",
                      "GetEntityOptions options = new GetEntityOptions.Builder(workspaceId, entityName).build();\n",
                      "\n",
                      "Entity response = assistant.getEntity(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String entityName = \"beverage\";\n",
                      "\n",
                      "GetEntityOptions options = new GetEntityOptions.Builder(workspaceId, entityName).build();\n",
                      "\n",
                      "Entity response = assistant.getEntity(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  entity: 'beverage'\n",
                      "};\n",
                      "\n",
                      "assistant.getEntity(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  entity: 'beverage'\n",
                      "};\n",
                      "\n",
                      "assistant.getEntity(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.get_entity(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    entity='beverage'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.get_entity(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    entity='beverage'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "post": {
        "operationId": "updateEntity",
        "summary": "Update entity",
        "description": "Update an existing entity with new or modified data. You must provide component objects defining the content of the updated entity.\n\nIf you want to update multiple entities with a single API call, consider using the **[Update workspace](#update-workspace)** method instead.",
        "x-rate-limit": "This operation is limited to 1000 requests per 30 minutes.",
        "tags": [
          "Entities"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "append",
            "required": false,
            "description": "Whether the new data is to be appended to the existing data in the entity. If **append**=`false`, elements included in the new data completely replace the corresponding existing elements, including all subelements. For example, if the new data for the entity includes **values** and **append**=`false`, all existing values for the entity are discarded and replaced with the new values.\n\nIf **append**=`true`, existing elements are preserved, and the new elements are added. If any elements in the new data collide with existing elements, the update request fails.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEntity"
              }
            }
          },
          "description": "The updated content of the entity. Any elements included in the new data will completely replace the equivalent existing elements, including all subelements. (Previously existing subelements are not retained unless they are also included in the new data.) For example, if you update the values for an entity, the previously existing values are discarded and replaced with the new values specified in the update.",
          "required": true
        },
        "x-codegen-request-body-name": "body",
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entity"
                },
                "examples": {
                  "response": {
                    "value": {
                      "entity": "beverage",
                      "description": "Liquid refreshment"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" \\\n",
                      "--header \"Content-Type: application/json\" \\\n",
                      "--data \"{\\\"description\\\":\\\"Liquid refreshment\\\"}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/entities/beverage?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Content-Type: application/json\" -X POST -H \"Authorization: Bearer {token}\" -d \"{\\\"description\\\":\\\"Liquid refreshment\\\"}\" \"{url}/v1/workspaces/{workspace_id}/entities/beverage?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.UpdateEntity(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    entity: \"beverage\",\n",
                      "    newDescription: \"Liquid refreshment\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);\n",
                      "\n",
                      "entity = result.Result._Entity;"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.UpdateEntity(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    entity: \"beverage\",\n",
                      "    newDescription: \"Liquid refreshment\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);\n",
                      "\n",
                      "entity = result.Result._Entity;"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String entityName = \"beverage\";\n",
                      "String description = \"Liquid refreshment\";\n",
                      "\n",
                      "UpdateEntityOptions options = new UpdateEntityOptions.Builder(workspaceId, entityName)\n",
                      "  .newDescription(description)\n",
                      "  .build();\n",
                      "\n",
                      "Entity response = assistant.updateEntity(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String entityName = \"beverage\";\n",
                      "String description = \"Liquid refreshment\";\n",
                      "\n",
                      "UpdateEntityOptions options = new UpdateEntityOptions.Builder(workspaceId, entityName)\n",
                      "  .newDescription(description)\n",
                      "  .build();\n",
                      "\n",
                      "Entity response = assistant.updateEntity(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  entity: 'beverage',\n",
                      "  newEntity: 'beverage',\n",
                      "  newDescription: 'Liquid refreshment'\n",
                      "};\n",
                      "\n",
                      "assistant.updateEntity(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  entity: 'beverage',\n",
                      "  newEntity: 'beverage',\n",
                      "  newDescription: 'Liquid refreshment'\n",
                      "};\n",
                      "\n",
                      "assistant.updateEntity(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.update_entity(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    entity='beverage',\n",
                      "    new_description='Liquid refreshment'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.update_entity(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    entity='beverage',\n",
                      "    new_description='Liquid refreshment'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "operationId": "deleteEntity",
        "summary": "Delete entity",
        "description": "Delete an entity from a workspace, or disable a system entity.",
        "x-rate-limit": "This operation is limited to 1000 requests per 30 minutes.",
        "tags": [
          "Entities"
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE -u \"apikey:{apikey}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/entities/beverage?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE -H \"Authorization: Bearer {token}\" \"{url}/v1/workspaces/{workspace_id}/entities/beverage?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.DeleteEntity(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    entity: \"beverage\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.DeleteEntity(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    entity: \"beverage\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String entityName = \"beverage\";\n",
                      "\n",
                      "DeleteEntityOptions options = new DeleteEntityOptions.Builder(workspaceId, entityName).build();\n",
                      "\n",
                      "assistant.deleteEntity(options).execute();"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String entityName = \"beverage\";\n",
                      "\n",
                      "DeleteEntityOptions options = new DeleteEntityOptions.Builder(workspaceId, entityName).build();\n",
                      "\n",
                      "assistant.deleteEntity(options).execute();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  entity: 'beverage'\n",
                      "};\n",
                      "\n",
                      "assistant.deleteEntity(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  entity: 'beverage'\n",
                      "};\n",
                      "\n",
                      "assistant.deleteEntity(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.delete_entity(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    entity='beverage'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.delete_entity(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    entity='beverage'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/workspaces/{workspace_id}/entities/{entity}/values": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspacePathParam"
        },
        {
          "$ref": "#/components/parameters/EntityPathParam"
        },
        {
          "$ref": "#/components/parameters/VersionQueryParam"
        }
      ],
      "get": {
        "operationId": "listValues",
        "summary": "List entity values",
        "description": "List the values for an entity.",
        "x-rate-limit": "This operation is limited to 2500 requests per 30 minutes.",
        "tags": [
          "Values"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ExportQueryParam"
          },
          {
            "$ref": "#/components/parameters/PageLimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/IncludeCountQueryParam"
          },
          {
            "in": "query",
            "name": "sort",
            "required": false,
            "description": "The attribute by which returned entity values will be sorted. To reverse the sort order, prefix the value with a minus sign (`-`).",
            "schema": {
              "type": "string",
              "enum": [
                "value",
                "updated"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/CursorQueryParam"
          },
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValueCollection"
                },
                "examples": {
                  "response": {
                    "value": {
                      "values": [
                        {
                          "type": "synonyms",
                          "value": "orange juice"
                        },
                        {
                          "type": "synonyms",
                          "value": "soda"
                        },
                        {
                          "type": "synonyms",
                          "value": "water"
                        }
                      ],
                      "pagination": {
                        "refresh_url": "/v1/workspaces/9978a49e-ea89-4493-b33d-82298d3db20d/entities/beverage/values?version=2021-11-27"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -u \"apikey:{apikey}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/entities/beverage/values?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Authorization: Bearer {token}\" \"{url}/v1/workspaces/{workspace_id}/entities/beverage/values?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.ListValues(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    entity: \"beverage\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.ListValues(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    entity: \"beverage\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String entityName = \"beverage\";\n",
                      "\n",
                      "ListValuesOptions options = new ListValuesOptions.Builder(workspaceId, entityName).build();\n",
                      "\n",
                      "ValueCollection response = assistant.listValues(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String entityName = \"beverage\";\n",
                      "\n",
                      "ListValuesOptions options = new ListValuesOptions.Builder(workspaceId, entityName).build();\n",
                      "\n",
                      "ValueCollection response = assistant.listValues(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  entity: 'beverage'\n",
                      "};\n",
                      "\n",
                      "assistant.listValues(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  entity: 'beverage'\n",
                      "};\n",
                      "\n",
                      "assistant.listValues(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.list_values(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    entity='beverage'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.list_values(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    entity='beverage'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "post": {
        "operationId": "createValue",
        "summary": "Create entity value",
        "description": "Create a new value for an entity.\n\nIf you want to create multiple entity values with a single API call, consider using the **[Update entity](#update-entity)** method instead.",
        "x-rate-limit": "This operation is limited to 1000 requests per 30 minutes.",
        "tags": [
          "Values"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateValue"
              }
            }
          },
          "description": "The new entity value.",
          "required": true
        },
        "x-codegen-request-body-name": "body",
        "responses": {
          "201": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Value"
                },
                "examples": {
                  "response": {
                    "value": {
                      "type": "synonyms",
                      "value": "beer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" \\\n",
                      "--header \"Content-Type: application/json\" \\\n",
                      "--data \"{\\\"value\\\":\\\"beer\\\"}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/entities/beverage/values?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Content-Type: application/json\" -X POST -H \"Authorization: Bearer {token}\" -d \"{\\\"value\\\":\\\"beer\\\"}\" \"{url}/v1/workspaces/{workspace_id}/entities/beverage/values?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.CreateValue(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    entity: \"beverage\",\n",
                      "    value: \"beer\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.CreateValue(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    entity: \"beverage\",\n",
                      "    value: \"beer\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String entityName = \"beverage\";\n",
                      "String value = \"beer\";\n",
                      "\n",
                      "CreateValueOptions options = new CreateValueOptions.Builder(workspaceId, entityName, value).build();\n",
                      "\n",
                      "Value response = assistant.createValue(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String entityName = \"beverage\";\n",
                      "String value = \"beer\";\n",
                      "\n",
                      "CreateValueOptions options = new CreateValueOptions.Builder(workspaceId, entityName, value).build();\n",
                      "\n",
                      "Value response = assistant.createValue(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  entity: 'beverage',\n",
                      "  value: 'beer'\n",
                      "};\n",
                      "\n",
                      "assistant.createValue(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  entity: 'beverage',\n",
                      "  value: 'beer'\n",
                      "};\n",
                      "\n",
                      "assistant.createValue(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.create_value(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    entity='beverage',\n",
                      "    value='beer'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.create_value(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    entity='beverage',\n",
                      "    value='beer'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/workspaces/{workspace_id}/entities/{entity}/values/{value}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspacePathParam"
        },
        {
          "$ref": "#/components/parameters/EntityPathParam"
        },
        {
          "$ref": "#/components/parameters/ValuePathParam"
        },
        {
          "$ref": "#/components/parameters/VersionQueryParam"
        }
      ],
      "get": {
        "operationId": "getValue",
        "summary": "Get entity value",
        "description": "Get information about an entity value.",
        "x-rate-limit": "This operation is limited to 6000 requests per 5 minutes.",
        "tags": [
          "Values"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ExportQueryParam"
          },
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Value"
                },
                "examples": {
                  "response": {
                    "value": {
                      "type": "synonyms",
                      "value": "orange juice"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -u \"apikey:{apikey}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/entities/beverage/values/orange%20juice?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Authorization: Bearer {token}\" \"{url}/v1/workspaces/{workspace_id}/entities/beverage/values/orange%20juice?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.GetValue(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    entity: \"beverage\",\n",
                      "    value: \"orange juice\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.GetValue(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    entity: \"beverage\",\n",
                      "    value: \"orange juice\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String entityName = \"beverage\";\n",
                      "String value = \"orange juice\";\n",
                      "\n",
                      "GetValueOptions options = new GetValueOptions.Builder(workspaceId, entityName, value).build();\n",
                      "\n",
                      "Value response = assistant.getValue(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String entityName = \"beverage\";\n",
                      "String value = \"orange juice\";\n",
                      "\n",
                      "GetValueOptions options = new GetValueOptions.Builder(workspaceId, entityName, value).build();\n",
                      "\n",
                      "Value response = assistant.getValue(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  entity: 'beverage',\n",
                      "  value: 'orange juice'\n",
                      "};\n",
                      "\n",
                      "assistant.getValue(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  entity: 'beverage',\n",
                      "  value: 'orange juice'\n",
                      "};\n",
                      "\n",
                      "assistant.getValue(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.get_value(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    entity='beverage',\n",
                      "    value='orange juice'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.get_value(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    entity='beverage',\n",
                      "    value='orange juice'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "post": {
        "operationId": "updateValue",
        "summary": "Update entity value",
        "description": "Update an existing entity value with new or modified data. You must provide component objects defining the content of the updated entity value.\n\nIf you want to update multiple entity values with a single API call, consider using the **[Update entity](#update-entity)** method instead.",
        "x-rate-limit": "This operation is limited to 1000 requests per 30 minutes.",
        "tags": [
          "Values"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "append",
            "required": false,
            "description": "Whether the new data is to be appended to the existing data in the entity value. If **append**=`false`, elements included in the new data completely replace the corresponding existing elements, including all subelements. For example, if the new data for the entity value includes **synonyms** and **append**=`false`, all existing synonyms for the entity value are discarded and replaced with the new synonyms.\n\nIf **append**=`true`, existing elements are preserved, and the new elements are added. If any elements in the new data collide with existing elements, the update request fails.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateValue"
              }
            }
          },
          "description": "The updated content of the entity value.\n\nAny elements included in the new data will completely replace the equivalent existing elements, including all subelements. (Previously existing subelements are not retained unless they are also included in the new data.) For example, if you update the synonyms for an entity value, the previously existing synonyms are discarded and replaced with the new synonyms specified in the update.",
          "required": true
        },
        "x-codegen-request-body-name": "body",
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Value"
                },
                "examples": {
                  "response": {
                    "value": {
                      "type": "synonyms",
                      "value": "soda"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" \\\n",
                      "--header \"Content-Type: application/json\" \\\n",
                      "--data \"{\\\"synonyms\\\":[\\\"pop\\\",\\\"soft drink\\\"]}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/entities/beverage/values/soda?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Content-Type: application/json\" -X POST -H \"Authorization: Bearer {token}\" -d \"{\\\"synonyms\\\":[\\\"pop\\\",\\\"soft drink\\\"]}\" \"{url}/v1/workspaces/{workspace_id}/entities/beverage/values/soda?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.UpdateValue(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    entity: \"beverage\",\n",
                      "    value: \"soda\",\n",
                      "    newSynonyms: new List<string>()\n",
                      "    {\n",
                      "        \"pop\",\n",
                      "        \"soft drink\"\n",
                      "    }\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.UpdateValue(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    entity: \"beverage\",\n",
                      "    value: \"soda\",\n",
                      "    newSynonyms: new List<string>()\n",
                      "    {\n",
                      "        \"pop\",\n",
                      "        \"soft drink\"\n",
                      "    }\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String entityName = \"beverage\";\n",
                      "String value = \"soda\";\n",
                      "\n",
                      "List<String> newSynonyms = Arrays.asList(\"pop\", \"soft drink\");\n",
                      "\n",
                      "UpdateValueOptions options = new UpdateValueOptions.Builder(workspaceId, entityName, value)\n",
                      "  .newSynonyms(newSynonyms)\n",
                      "  .build();\n",
                      "\n",
                      "Value response = assistant.updateValue(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String entityName = \"beverage\";\n",
                      "String value = \"soda\";\n",
                      "\n",
                      "List<String> newSynonyms = Arrays.asList(\"pop\", \"soft drink\");\n",
                      "\n",
                      "UpdateValueOptions options = new UpdateValueOptions.Builder(workspaceId, entityName, value)\n",
                      "  .newSynonyms(newSynonyms)\n",
                      "  .build();\n",
                      "\n",
                      "Value response = assistant.updateValue(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  entity: 'beverage',\n",
                      "  value: 'soda',\n",
                      "  newSynonyms: [\n",
                      "    'pop',\n",
                      "    'soft drink'\n",
                      "  ]\n",
                      "};\n",
                      "\n",
                      "assistant.updateValue(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  entity: 'beverage',\n",
                      "  value: 'soda',\n",
                      "  newSynonyms: [\n",
                      "    'pop',\n",
                      "    'soft drink'\n",
                      "  ]\n",
                      "};\n",
                      "\n",
                      "assistant.updateValue(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.update_value(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    entity='beverage',\n",
                      "    value='soda',\n",
                      "    new_synonyms=['pop', 'soft drink']\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.update_value(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    entity='beverage',\n",
                      "    value='soda',\n",
                      "    new_synonyms=['pop', 'soft drink']\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "operationId": "deleteValue",
        "summary": "Delete entity value",
        "description": "Delete a value from an entity.",
        "x-rate-limit": "This operation is limited to 1000 requests per 30 minutes.",
        "tags": [
          "Values"
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE -u \"apikey:{apikey}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/entities/beverage/values/beer?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE -H \"Authorization: Bearer {token}\" \"{url}/v1/workspaces/{workspace_id}/entities/beverage/values/beer?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.DeleteValue(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    entity: \"beverage\",\n",
                      "    value: \"beer\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.DeleteValue(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    entity: \"beverage\",\n",
                      "    value: \"beer\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String entityName = \"beverage\";\n",
                      "String value = \"beer\";\n",
                      "\n",
                      "DeleteValueOptions options = new DeleteValueOptions.Builder(workspaceId, entityName, value).build();\n",
                      "\n",
                      "assistant.deleteValue(options).execute();"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String entityName = \"beverage\";\n",
                      "String value = \"beer\";\n",
                      "\n",
                      "DeleteValueOptions options = new DeleteValueOptions.Builder(workspaceId, entityName, value).build();\n",
                      "\n",
                      "assistant.deleteValue(options).execute();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  entity: 'beverage',\n",
                      "  value: 'beer'\n",
                      "};\n",
                      "\n",
                      "assistant.deleteValue(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  entity: 'beverage',\n",
                      "  value: 'beer'\n",
                      "};\n",
                      "\n",
                      "assistant.deleteValue(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.delete_value(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    entity='beverage',\n",
                      "    value='beer'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.delete_value(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    entity='beverage',\n",
                      "    value='beer'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/workspaces/{workspace_id}/entities/{entity}/values/{value}/synonyms": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspacePathParam"
        },
        {
          "$ref": "#/components/parameters/EntityPathParam"
        },
        {
          "$ref": "#/components/parameters/ValuePathParam"
        },
        {
          "$ref": "#/components/parameters/VersionQueryParam"
        }
      ],
      "get": {
        "operationId": "listSynonyms",
        "summary": "List entity value synonyms",
        "description": "List the synonyms for an entity value.",
        "x-rate-limit": "This operation is limited to 2500 requests per 30 minutes.",
        "tags": [
          "Synonyms"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageLimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/IncludeCountQueryParam"
          },
          {
            "in": "query",
            "name": "sort",
            "required": false,
            "description": "The attribute by which returned entity value synonyms will be sorted. To reverse the sort order, prefix the value with a minus sign (`-`).",
            "schema": {
              "type": "string",
              "enum": [
                "synonym",
                "updated"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/CursorQueryParam"
          },
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SynonymCollection"
                },
                "examples": {
                  "response": {
                    "value": {
                      "synonyms": [
                        {
                          "synonym": "pop"
                        },
                        {
                          "synonym": "soft drink"
                        }
                      ],
                      "pagination": {
                        "refresh_url": "/v1/workspaces/bec28d8f-18c1-4e97-8d08-9c842c658b51/entities/beverage/values/soda/synonyms?version=2021-11-27"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -u \"apikey:{apikey}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/entities/beverage/values/soda/synonyms?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Authorization: Bearer {token}\" \"{url}/v1/workspaces/{workspace_id}/entities/beverage/values/soda/synonyms?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.ListSynonyms(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    entity: \"beverage\",\n",
                      "    value: \"soda\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.ListSynonyms(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    entity: \"beverage\",\n",
                      "    value: \"soda\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String entityName = \"beverage\";\n",
                      "String value = \"soda\";\n",
                      "\n",
                      "ListSynonymsOptions options = new ListSynonymsOptions.Builder(workspaceId, entityName, value).build();\n",
                      "\n",
                      "SynonymCollection response = assistant.listSynonyms(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String entityName = \"beverage\";\n",
                      "String value = \"soda\";\n",
                      "\n",
                      "ListSynonymsOptions options = new ListSynonymsOptions.Builder(workspaceId, entityName, value).build();\n",
                      "\n",
                      "SynonymCollection response = assistant.listSynonyms(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  entity: 'beverage',\n",
                      "  value: 'soda'\n",
                      "};\n",
                      "\n",
                      "assistant.listSynonyms(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  entity: 'beverage',\n",
                      "  value: 'soda'\n",
                      "};\n",
                      "\n",
                      "assistant.listSynonyms(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.list_synonyms(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    entity='beverage',\n",
                      "    value='soda'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.list_synonyms(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    entity='beverage',\n",
                      "    value='soda'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "post": {
        "operationId": "createSynonym",
        "summary": "Create entity value synonym",
        "description": "Add a new synonym to an entity value.\n\nIf you want to create multiple synonyms with a single API call, consider using the **[Update entity](#update-entity)** or **[Update entity value](#update-entity-value)** method instead.",
        "x-rate-limit": "This operation is limited to 1000 requests per 30 minutes.",
        "tags": [
          "Synonyms"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Synonym"
              }
            }
          },
          "description": "The new synonym.",
          "required": true
        },
        "x-codegen-request-body-name": "body",
        "responses": {
          "201": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Synonym"
                },
                "examples": {
                  "response": {
                    "value": {
                      "synonym": "OJ"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" \\\n",
                      "--header \"Content-Type: application/json\" \\\n",
                      "--data \"{\\\"synonym\\\":\\\"OJ\\\"}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/entities/beverage/values/orange%20juice/synonyms?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Content-Type: application/json\" -X POST -H \"Authorization: Bearer {token}\" -d \"{\\\"synonym\\\":\\\"OJ\\\"}\" \"{url}/v1/workspaces/{workspace_id}/entities/beverage/values/orange%20juice/synonyms?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.CreateSynonym(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    entity: \"beverage\",\n",
                      "    value: \"orange juice\",\n",
                      "    synonym: \"OJ\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.CreateSynonym(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    entity: \"beverage\",\n",
                      "    value: \"orange juice\",\n",
                      "    synonym: \"OJ\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String entityName = \"beverage\";\n",
                      "String value = \"orange juice\";\n",
                      "String synonym = \"OJ\";\n",
                      "\n",
                      "CreateSynonymOptions options = new CreateSynonymOptions.Builder(workspaceId, entityName, value, synonym).build();\n",
                      "\n",
                      "Synonym response = assistant.createSynonym(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String entityName = \"beverage\";\n",
                      "String value = \"orange juice\";\n",
                      "String synonym = \"OJ\";\n",
                      "\n",
                      "CreateSynonymOptions options = new CreateSynonymOptions.Builder(workspaceId, entityName, value, synonym).build();\n",
                      "\n",
                      "Synonym response = assistant.createSynonym(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  entity: 'beverage',\n",
                      "  value: 'orange juice',\n",
                      "  synonym: 'OJ'\n",
                      "};\n",
                      "\n",
                      "assistant.createSynonym(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  entity: 'beverage',\n",
                      "  value: 'orange juice',\n",
                      "  synonym: 'OJ'\n",
                      "};\n",
                      "\n",
                      "assistant.createSynonym(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.create_synonym(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    entity='beverage',\n",
                      "    value='orange juice',\n",
                      "    synonym='OJ'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.create_synonym(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    entity='beverage',\n",
                      "    value='orange juice',\n",
                      "    synonym='OJ'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/workspaces/{workspace_id}/entities/{entity}/values/{value}/synonyms/{synonym}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspacePathParam"
        },
        {
          "$ref": "#/components/parameters/EntityPathParam"
        },
        {
          "$ref": "#/components/parameters/ValuePathParam"
        },
        {
          "in": "path",
          "name": "synonym",
          "required": true,
          "description": "The text of the synonym.",
          "schema": {
            "type": "string"
          }
        },
        {
          "$ref": "#/components/parameters/VersionQueryParam"
        }
      ],
      "get": {
        "operationId": "getSynonym",
        "summary": "Get entity value synonym",
        "description": "Get information about a synonym of an entity value.",
        "x-rate-limit": "This operation is limited to 6000 requests per 5 minutes.",
        "tags": [
          "Synonyms"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Synonym"
                },
                "examples": {
                  "response": {
                    "value": {
                      "synonym": "OJ"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -u \"apikey:{apikey}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/entities/beverage/values/orange%20juice/synonyms/OJ?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Authorization: Bearer {token}\" \"{url}/v1/workspaces/{workspace_id}/entities/beverage/values/orange%20juice/synonyms/OJ?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.GetSynonym(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    entity: \"beverage\",\n",
                      "    value: \"orange juice\",\n",
                      "    synonym: \"OJ\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.GetSynonym(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    entity: \"beverage\",\n",
                      "    value: \"orange juice\",\n",
                      "    synonym: \"OJ\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String entityName = \"beverage\";\n",
                      "String value = \"orange juice\";\n",
                      "String synonym = \"OJ\";\n",
                      "\n",
                      "GetSynonymOptions options = new GetSynonymOptions.Builder(workspaceId, entityName, value, synonym).build();\n",
                      "\n",
                      "Synonym response = assistant.getSynonym(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String entityName = \"beverage\";\n",
                      "String value = \"orange juice\";\n",
                      "String synonym = \"OJ\";\n",
                      "\n",
                      "GetSynonymOptions options = new GetSynonymOptions.Builder(workspaceId, entityName, value, synonym).build();\n",
                      "\n",
                      "Synonym response = assistant.getSynonym(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  entity: 'beverage',\n",
                      "  value: 'orange juice',\n",
                      "  synonym: 'OJ'\n",
                      "};\n",
                      "\n",
                      "assistant.getSynonym(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  entity: 'beverage',\n",
                      "  value: 'orange juice',\n",
                      "  synonym: 'OJ'\n",
                      "};\n",
                      "\n",
                      "assistant.getSynonym(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.get_synonym(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    entity='beverage',\n",
                      "    value='orange juice',\n",
                      "    synonym='OJ'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.get_synonym(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    entity='beverage',\n",
                      "    value='orange juice',\n",
                      "    synonym='OJ'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "post": {
        "operationId": "updateSynonym",
        "summary": "Update entity value synonym",
        "description": "Update an existing entity value synonym with new text.\n\nIf you want to update multiple synonyms with a single API call, consider using the **[Update entity](#update-entity)** or **[Update entity value](#update-entity-value)** method instead.",
        "x-rate-limit": "This operation is limited to 1000 requests per 30 minutes.",
        "tags": [
          "Synonyms"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSynonym"
              }
            }
          },
          "description": "The updated entity value synonym.",
          "required": true
        },
        "x-codegen-request-body-name": "body",
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Synonym"
                },
                "examples": {
                  "response": {
                    "value": {
                      "synonym": "O.J."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" \\\n",
                      "--header \"Content-Type: application/json\" \\\n",
                      "--data \"{\\\"synonym\\\":\\\"O.J.\\\"}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/entities/beverage/values/orange%20juice/synonyms/OJ?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Content-Type: application/json\" -X POST -H \"Authorization: Bearer {token}\" -d \"{\\\"synonym\\\":\\\"O.J.\\\"}\" \"{url}/v1/workspaces/{workspace_id}/entities/beverage/values/orange%20juice/synonyms/OJ?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.UpdateSynonym(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    entity: \"beverage\",\n",
                      "    value: \"orange juice\",\n",
                      "    synonym: \"OJ\",\n",
                      "    newSynonym: \"O.J.\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.UpdateSynonym(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    entity: \"beverage\",\n",
                      "    value: \"orange juice\",\n",
                      "    synonym: \"OJ\",\n",
                      "    newSynonym: \"O.J.\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String entityName = \"beverage\";\n",
                      "String value = \"orange juice\";\n",
                      "String synonym = \"OJ\";\n",
                      "String newSynonym = \"O.J.\";\n",
                      "\n",
                      "UpdateSynonymOptions options = new UpdateSynonymOptions.Builder(workspaceId, entityName, value, synonym)\n",
                      "  .newSynonym(newSynonym)\n",
                      "  .build();\n",
                      "\n",
                      "Synonym response = assistant.updateSynonym(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String entityName = \"beverage\";\n",
                      "String value = \"orange juice\";\n",
                      "String synonym = \"OJ\";\n",
                      "String newSynonym = \"O.J.\";\n",
                      "\n",
                      "UpdateSynonymOptions options = new UpdateSynonymOptions.Builder(workspaceId, entityName, value, synonym)\n",
                      "  .newSynonym(newSynonym)\n",
                      "  .build();\n",
                      "\n",
                      "Synonym response = assistant.updateSynonym(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  entity: 'beverage',\n",
                      "  value: 'orange juice',\n",
                      "  synonym: 'OJ',\n",
                      "  newSynonym: 'O.J.'\n",
                      "};\n",
                      "\n",
                      "assistant.updateSynonym(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  entity: 'beverage',\n",
                      "  value: 'orange juice',\n",
                      "  synonym: 'OJ',\n",
                      "  newSynonym: 'O.J.'\n",
                      "};\n",
                      "\n",
                      "assistant.updateSynonym(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.update_synonym(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    entity='beverage',\n",
                      "    value='orange juice',\n",
                      "    synonym='OJ',\n",
                      "    new_synonym='O.J.'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.update_synonym(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    entity='beverage',\n",
                      "    value='orange juice',\n",
                      "    synonym='OJ',\n",
                      "    new_synonym='O.J.'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "operationId": "deleteSynonym",
        "summary": "Delete entity value synonym",
        "description": "Delete a synonym from an entity value.",
        "x-rate-limit": "This operation is limited to 1000 requests per 30 minutes.",
        "tags": [
          "Synonyms"
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE -u \"apikey:{apikey}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/entities/beverage/values/orange%20juice/synonyms/OJ?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE -H \"Authorization: Bearer {token}\" \"{url}/v1/workspaces/{workspace_id}/entities/beverage/values/orange%20juice/synonyms/OJ?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.DeleteSynonym(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    entity: \"beverage\",\n",
                      "    value: \"orange juice\",\n",
                      "    synonym: \"OJ\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.DeleteSynonym(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    entity: \"beverage\",\n",
                      "    value: \"orange juice\",\n",
                      "    synonym: \"OJ\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String entityName = \"beverage\";\n",
                      "String value = \"orange juice\";\n",
                      "String synonym = \"OJ\";\n",
                      "\n",
                      "DeleteSynonymOptions options = new DeleteSynonymOptions.Builder(workspaceId, entityName, value, synonym).build();\n",
                      "\n",
                      "assistant.deleteSynonym(options).execute();"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String entityName = \"beverage\";\n",
                      "String value = \"orange juice\";\n",
                      "String synonym = \"OJ\";\n",
                      "\n",
                      "DeleteSynonymOptions options = new DeleteSynonymOptions.Builder(workspaceId, entityName, value, synonym).build();\n",
                      "\n",
                      "assistant.deleteSynonym(options).execute();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  entity: 'beverage',\n",
                      "  value: 'orange juice',\n",
                      "  synonym: 'OJ'\n",
                      "};\n",
                      "\n",
                      "assistant.deleteSynonym(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  entity: 'beverage',\n",
                      "  value: 'orange juice',\n",
                      "  synonym: 'OJ'\n",
                      "};\n",
                      "\n",
                      "assistant.deleteSynonym(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.delete_synonym(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    entity='beverage',\n",
                      "    value='orange juice',\n",
                      "    synonym='OJ'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.delete_synonym(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    entity='beverage',\n",
                      "    value='orange juice',\n",
                      "    synonym='OJ'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/workspaces/{workspace_id}/entities/{entity}/mentions": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspacePathParam"
        },
        {
          "$ref": "#/components/parameters/EntityPathParam"
        },
        {
          "$ref": "#/components/parameters/VersionQueryParam"
        }
      ],
      "get": {
        "operationId": "listMentions",
        "summary": "List entity mentions",
        "description": "List mentions for a contextual entity. An entity mention is an occurrence of a contextual entity in the context of an intent user input example.",
        "x-rate-limit": "This operation is limited to 200 requests per 30 minutes.",
        "tags": [
          "Mentions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ExportQueryParam"
          },
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityMentionCollection"
                },
                "examples": {
                  "response": {
                    "value": {
                      "examples": [
                        {
                          "text": "Can I get a soda?",
                          "intent": "place_order",
                          "location": [
                            12,
                            16
                          ]
                        }
                      ],
                      "pagination": {
                        "refresh_url": "/v1/workspaces/9978a49e-ea89-4493-b33d-82298d3db20d/entities/beverage/mentions?version=2021-11-27"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -u \"apikey:{apikey}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/entities/beverage/mentions?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Authorization: Bearer {token}\" \"{url}/v1/workspaces/{workspace_id}/entities/beverage/mentions?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.ListMentions(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    entity: \"beverage\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.ListMentions(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    entity: \"beverage\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String entityName = \"beverage\";\n",
                      "\n",
                      "ListMentionsOptions options = new ListMentionsOptions.Builder(workspaceId, entityName).build();\n",
                      "\n",
                      "EntityMentionCollection response = assistant.listMentions(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String entityName = \"beverage\";\n",
                      "\n",
                      "ListMentionsOptions options = new ListMentionsOptions.Builder(workspaceId, entityName).build();\n",
                      "\n",
                      "EntityMentionCollection response = assistant.listMentions(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  entity: 'beverage'\n",
                      "};\n",
                      "\n",
                      "assistant.listMentions(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  entity: 'beverage'\n",
                      "};\n",
                      "\n",
                      "assistant.listMentions(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.list_mentions(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    entity='beverage'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.list_mentions(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    entity='beverage'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/workspaces/{workspace_id}/intents": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspacePathParam"
        },
        {
          "$ref": "#/components/parameters/VersionQueryParam"
        }
      ],
      "get": {
        "operationId": "listIntents",
        "summary": "List intents",
        "description": "List the intents for a workspace.",
        "x-rate-limit": "With **export**=`false`, this operation is limited to 2000 requests per 30 minutes. With **export**=`true`, the limit is 400 requests per 30 minutes.",
        "tags": [
          "Intents"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ExportQueryParam"
          },
          {
            "$ref": "#/components/parameters/PageLimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/IncludeCountQueryParam"
          },
          {
            "in": "query",
            "name": "sort",
            "required": false,
            "description": "The attribute by which returned intents will be sorted. To reverse the sort order, prefix the value with a minus sign (`-`).",
            "schema": {
              "type": "string",
              "enum": [
                "intent",
                "updated"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/CursorQueryParam"
          },
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntentCollection"
                },
                "examples": {
                  "response": {
                    "value": {
                      "intents": [
                        {
                          "intent": "goodbye"
                        },
                        {
                          "intent": "hello"
                        }
                      ],
                      "pagination": {
                        "refresh_url": "/v1/workspaces/9978a49e-ea89-4493-b33d-82298d3db20d/intents?version=2021-11-27"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -u \"apikey:{apikey}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/intents?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Authorization: Bearer {token}\" \"{url}/v1/workspaces/{workspace_id}/intents?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.ListIntents(\n",
                      "    workspaceId: \"{workspaceId}\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.ListIntents(\n",
                      "    workspaceId: \"{workspaceId}\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "\n",
                      "ListIntentsOptions options = new ListIntentsOptions.Builder(workspaceId).build();\n",
                      "\n",
                      "IntentCollection response = assistant.listIntents(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "\n",
                      "ListIntentsOptions options = new ListIntentsOptions.Builder(workspaceId).build();\n",
                      "\n",
                      "IntentCollection response = assistant.listIntents(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "};\n",
                      "\n",
                      "assistant.listIntents(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "};\n",
                      "\n",
                      "assistant.listIntents(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.list_intents(\n",
                      "    workspace_id='{workspace_id}'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.list_intents(\n",
                      "    workspace_id='{workspace_id}'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "post": {
        "operationId": "createIntent",
        "summary": "Create intent",
        "description": "Create a new intent.\n\nIf you want to create multiple intents with a single API call, consider using the **[Update workspace](#update-workspace)** method instead.",
        "x-rate-limit": "This operation is limited to 2000 requests per 30 minutes.",
        "tags": [
          "Intents"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIntent"
              }
            }
          },
          "description": "The content of the new intent.",
          "required": true
        },
        "x-codegen-request-body-name": "body",
        "responses": {
          "201": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Intent"
                },
                "examples": {
                  "response": {
                    "value": {
                      "intent": "hello"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" \\\n",
                      "--header \"Content-Type: application/json\" \\\n",
                      "--data \"{\\\"intent\\\":\\\"hello\\\",\\\"examples\\\":[{\\\"text\\\":\\\"Good morning\\\"},{\\\"text\\\":\\\"Hi there\\\"}]}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/intents?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Content-Type: application/json\" -X POST -H \"Authorization: Bearer {token}\" -d \"{\\\"intent\\\":\\\"hello\\\",\\\"examples\\\":[{\\\"text\\\":\\\"Good morning\\\"},{\\\"text\\\":\\\"Hi there\\\"}]}\" \"{url}/v1/workspaces/{workspace_id}/intents?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.CreateIntent(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    intent: \"hello\",\n",
                      "    examples: new List<Example>()\n",
                      "    {\n",
                      "        new Example()\n",
                      "        {\n",
                      "            Text = \"Good morning\"\n",
                      "        },\n",
                      "        new Example()\n",
                      "        {\n",
                      "            Text = \"Hi there\"\n",
                      "        }\n",
                      "    }\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.CreateIntent(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    intent: \"hello\",\n",
                      "    examples: new List<Example>()\n",
                      "    {\n",
                      "        new Example()\n",
                      "        {\n",
                      "            Text = \"Good morning\"\n",
                      "        },\n",
                      "        new Example()\n",
                      "        {\n",
                      "            Text = \"Hi there\"\n",
                      "        }\n",
                      "    }\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String intent = \"hello\";\n",
                      "\n",
                      "List<Example> examples = new ArrayList<Example>();\n",
                      "examples.add(new Example.Builder(\"Good morning\").build());\n",
                      "examples.add(new Example.Builder(\"Hi there\").build());\n",
                      "\n",
                      "CreateIntentOptions options = new CreateIntentOptions.Builder(workspaceId, intent)\n",
                      "  .examples(examples)\n",
                      "  .build();\n",
                      "\n",
                      "Intent response = assistant.createIntent(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String intent = \"hello\";\n",
                      "\n",
                      "List<Example> examples = new ArrayList<Example>();\n",
                      "examples.add(new Example.Builder(\"Good morning\").build());\n",
                      "examples.add(new Example.Builder(\"Hi there\").build());\n",
                      "\n",
                      "CreateIntentOptions options = new CreateIntentOptions.Builder(workspaceId, intent)\n",
                      "  .examples(examples)\n",
                      "  .build();\n",
                      "\n",
                      "Intent response = assistant.createIntent(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  intent: 'hello',\n",
                      "  examples: [\n",
                      "    {\n",
                      "      text: 'Good morning'\n",
                      "    },\n",
                      "    {\n",
                      "      text: 'Hi there'\n",
                      "    }\n",
                      "  ]\n",
                      "};\n",
                      "\n",
                      "assistant.createIntent(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  intent: 'hello',\n",
                      "  examples: [\n",
                      "    {\n",
                      "      text: 'Good morning'\n",
                      "    },\n",
                      "    {\n",
                      "      text: 'Hi there'\n",
                      "    }\n",
                      "  ]\n",
                      "};\n",
                      "\n",
                      "assistant.createIntent(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.create_intent(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    intent='hello',\n",
                      "    examples=[\n",
                      "        {'text': 'Good morning'},\n",
                      "        {'text': 'Hi there'}\n",
                      "    ]\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.create_intent(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    intent='hello',\n",
                      "    examples=[\n",
                      "        {'text': 'Good morning'},\n",
                      "        {'text': 'Hi there'}\n",
                      "    ]\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/workspaces/{workspace_id}/intents/{intent}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspacePathParam"
        },
        {
          "$ref": "#/components/parameters/IntentPathParam"
        },
        {
          "$ref": "#/components/parameters/VersionQueryParam"
        }
      ],
      "get": {
        "operationId": "getIntent",
        "summary": "Get intent",
        "description": "Get information about an intent, optionally including all intent content.",
        "x-rate-limit": "With **export**=`false`, this operation is limited to 6000 requests per 5 minutes. With **export**=`true`, the limit is 400 requests per 30 minutes.",
        "tags": [
          "Intents"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ExportQueryParam"
          },
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Intent"
                },
                "examples": {
                  "response": {
                    "value": {
                      "intent": "hello"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -u \"apikey:{apikey}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/intents/hello?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Authorization: Bearer {token}\" \"{url}/v1/workspaces/{workspace_id}/intents/hello?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.GetIntent(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    intent: \"hello\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.GetIntent(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    intent: \"hello\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String intent = \"hello\";\n",
                      "\n",
                      "GetIntentOptions options = new GetIntentOptions.Builder(workspaceId, intent).build();\n",
                      "\n",
                      "Intent response = assistant.getIntent(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String intent = \"hello\";\n",
                      "\n",
                      "GetIntentOptions options = new GetIntentOptions.Builder(workspaceId, intent).build();\n",
                      "\n",
                      "Intent response = assistant.getIntent(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  intent: 'hello'\n",
                      "};\n",
                      "\n",
                      "assistant.getIntent(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  intent: 'hello'\n",
                      "};\n",
                      "\n",
                      "assistant.getIntent(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.get_intent(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    intent='hello'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.get_intent(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    intent='hello'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "post": {
        "operationId": "updateIntent",
        "summary": "Update intent",
        "description": "Update an existing intent with new or modified data. You must provide component objects defining the content of the updated intent.\n\nIf you want to update multiple intents with a single API call, consider using the **[Update workspace](#update-workspace)** method instead.",
        "x-rate-limit": "This operation is limited to 2000 requests per 30 minutes.",
        "tags": [
          "Intents"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "append",
            "required": false,
            "description": "Whether the new data is to be appended to the existing data in the object. If **append**=`false`, elements included in the new data completely replace the corresponding existing elements, including all subelements. For example, if the new data for the intent includes **examples** and **append**=`false`, all existing examples for the intent are discarded and replaced with the new examples.\n\nIf **append**=`true`, existing elements are preserved, and the new elements are added. If any elements in the new data collide with existing elements, the update request fails.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIntent"
              }
            }
          },
          "description": "The updated content of the intent.\n\nAny elements included in the new data will completely replace the equivalent existing elements, including all subelements. (Previously existing subelements are not retained unless they are also included in the new data.) For example, if you update the user input examples for an intent, the previously existing examples are discarded and replaced with the new examples specified in the update.",
          "required": true
        },
        "x-codegen-request-body-name": "body",
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Intent"
                },
                "examples": {
                  "response": {
                    "value": {
                      "intent": "hello",
                      "description": "Updated intent"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" \\\n",
                      "--header \"Content-Type: application/json\" \\\n",
                      "--data \"{\\\"intent\\\":\\\"hello\\\",\\\"examples\\\":[{\\\"text\\\":\\\"Good afternoon\\\"}],\\\"description\\\":\\\"Updated intent\\\"}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/intents/hello?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Content-Type: application/json\" -X POST -H \"Authorization: Bearer {token}\" -d \"{\\\"intent\\\":\\\"hello\\\",\\\"examples\\\":[{\\\"text\\\":\\\"Good afternoon\\\"}],\\\"description\\\":\\\"Updated intent\\\"}\" \"{url}/v1/workspaces/{workspace_id}/intents/hello?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.UpdateIntent(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    intent: \"hello\",\n",
                      "    newExamples: new List<Example>()\n",
                      "    {\n",
                      "        new Example()\n",
                      "        {\n",
                      "            Text = \"Good afternoon\"\n",
                      "        }\n",
                      "    },\n",
                      "    newDescription: \"Updated intent\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.UpdateIntent(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    intent: \"hello\",\n",
                      "    newExamples: new List<Example>()\n",
                      "    {\n",
                      "        new Example()\n",
                      "        {\n",
                      "            Text = \"Good afternoon\"\n",
                      "        }\n",
                      "    },\n",
                      "    newDescription: \"Updated intent\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String intent = \"hello\";\n",
                      "String description = \"Updated intent\";\n",
                      "\n",
                      "List<Example> examples = new ArrayList<Example>();\n",
                      "examples.add(new Example.Builder(\"Good afternoon\").build());\n",
                      "\n",
                      "UpdateIntentOptions options = new UpdateIntentOptions.Builder(workspaceId, intent)\n",
                      "  .newExamples(examples)\n",
                      "  .newDescription(description)\n",
                      "  .build();\n",
                      "\n",
                      "Intent response = assistant.updateIntent(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String intent = \"hello\";\n",
                      "String description = \"Updated intent\";\n",
                      "\n",
                      "List<Example> examples = new ArrayList<Example>();\n",
                      "examples.add(new Example.Builder(\"Good afternoon\").build());\n",
                      "\n",
                      "UpdateIntentOptions options = new UpdateIntentOptions.Builder(workspaceId, intent)\n",
                      "  .newExamples(examples)\n",
                      "  .newDescription(description)\n",
                      "  .build();\n",
                      "\n",
                      "Intent response = assistant.updateIntent(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  intent: 'hello',\n",
                      "  newExamples: [\n",
                      "    {\n",
                      "      text: 'Good afternoon'\n",
                      "    }\n",
                      "  ],\n",
                      "  newDescription: 'Updated intent'\n",
                      "};\n",
                      "\n",
                      "assistant.updateIntent(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  intent: 'hello',\n",
                      "  newExamples: [\n",
                      "    {\n",
                      "      text: 'Good afternoon'\n",
                      "    }\n",
                      "  ],\n",
                      "  newDescription: 'Updated intent'\n",
                      "};\n",
                      "\n",
                      "assistant.updateIntent(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.update_intent(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    intent='hello',\n",
                      "    new_examples=[\n",
                      "        {'text': 'Good afternoon'}\n",
                      "    ],\n",
                      "    new_description='Updated intent'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.update_intent(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    intent='hello',\n",
                      "    new_examples=[\n",
                      "        {'text': 'Good afternoon'}\n",
                      "    ],\n",
                      "    new_description='Updated intent'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "operationId": "deleteIntent",
        "summary": "Delete intent",
        "description": "Delete an intent from a workspace.",
        "x-rate-limit": "This operation is limited to 2000 requests per 30 minutes.",
        "tags": [
          "Intents"
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE -u \"apikey:{apikey}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/intents/hello?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE -H \"Authorization: Bearer {token}\" \"{url}/v1/workspaces/{workspace_id}/intents/hello?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.DeleteIntent(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    intent: \"hello\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.DeleteIntent(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    intent: \"hello\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String intent = \"hello\";\n",
                      "\n",
                      "DeleteIntentOptions options = new DeleteIntentOptions.Builder(workspaceId, intent).build();\n",
                      "\n",
                      "assistant.deleteIntent(options).execute();"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String intent = \"hello\";\n",
                      "\n",
                      "DeleteIntentOptions options = new DeleteIntentOptions.Builder(workspaceId, intent).build();\n",
                      "\n",
                      "assistant.deleteIntent(options).execute();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  intent: 'hello'\n",
                      "};\n",
                      "\n",
                      "assistant.deleteIntent(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  intent: 'hello'\n",
                      "};\n",
                      "\n",
                      "assistant.deleteIntent(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.delete_intent(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    intent='hello'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.delete_intent(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    intent='hello'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/workspaces/{workspace_id}/intents/{intent}/examples": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspacePathParam"
        },
        {
          "$ref": "#/components/parameters/IntentPathParam"
        },
        {
          "$ref": "#/components/parameters/VersionQueryParam"
        }
      ],
      "get": {
        "operationId": "listExamples",
        "summary": "List user input examples",
        "description": "List the user input examples for an intent, optionally including contextual entity mentions.",
        "x-rate-limit": "This operation is limited to 2500 requests per 30 minutes.",
        "tags": [
          "Examples"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageLimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/IncludeCountQueryParam"
          },
          {
            "in": "query",
            "name": "sort",
            "required": false,
            "description": "The attribute by which returned examples will be sorted. To reverse the sort order, prefix the value with a minus sign (`-`).",
            "schema": {
              "type": "string",
              "enum": [
                "text",
                "updated"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/CursorQueryParam"
          },
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExampleCollection"
                },
                "examples": {
                  "response": {
                    "value": {
                      "examples": [
                        {
                          "text": "Good afternoon"
                        },
                        {
                          "text": "hi there"
                        }
                      ],
                      "pagination": {
                        "refresh_url": "/v1/workspaces/9978a49e-ea89-4493-b33d-82298d3db20d/intents/hello/examples?version=2021-11-27&export=true"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -u \"apikey:{apikey}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/intents/hello/examples?version=2021-06-14&export=true\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Authorization: Bearer {token}\" \"{url}/v1/workspaces/{workspace_id}/intents/hello/examples?version=2020-04-01&export=true\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.ListExamples(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    intent: \"hello\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.ListExamples(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    intent: \"hello\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String intent = \"hello\";\n",
                      "\n",
                      "ListExamplesOptions options = new ListExamplesOptions.Builder(workspaceId, intent).build();\n",
                      "\n",
                      "ExampleCollection response = assistant.listExamples(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String intent = \"hello\";\n",
                      "\n",
                      "ListExamplesOptions options = new ListExamplesOptions.Builder(workspaceId, intent).build();\n",
                      "\n",
                      "ExampleCollection response = assistant.listExamples(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  intent: 'hello'\n",
                      "};\n",
                      "\n",
                      "assistant.listExamples(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  intent: 'hello'\n",
                      "};\n",
                      "\n",
                      "assistant.listExamples(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.list_examples(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    intent='hello'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.list_examples(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    intent='hello'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "post": {
        "operationId": "createExample",
        "summary": "Create user input example",
        "description": "Add a new user input example to an intent.\n\nIf you want to add multiple examples with a single API call, consider using the **[Update intent](#update-intent)** method instead.",
        "x-rate-limit": "This operation is limited to 1000 requests per 30 minutes.",
        "tags": [
          "Examples"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Example"
              }
            }
          },
          "description": "The content of the new user input example.",
          "required": true
        },
        "x-codegen-request-body-name": "body",
        "responses": {
          "201": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Example"
                },
                "examples": {
                  "response": {
                    "value": {
                      "text": "Howdy!"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" \\\n",
                      "--header \"Content-Type: application/json\" \\\n",
                      "--data \"{\\\"text\\\":\\\"Howdy!\\\"}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/intents/hello/examples?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Content-Type: application/json\" -X POST -H \"Authorization: Bearer {token}\" -d \"{\\\"text\\\":\\\"Howdy!\\\"}\" \"{url}/v1/workspaces/{workspace_id}/intents/hello/examples?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.CreateExample(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    intent: \"hello\",\n",
                      "    text: \"Howdy!\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.CreateExample(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    intent: \"hello\",\n",
                      "    text: \"Howdy!\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String intent = \"hello\";\n",
                      "String example = \"Howdy!\";\n",
                      "\n",
                      "CreateExampleOptions options = new CreateExampleOptions.Builder(workspaceId, intent, example).build();\n",
                      "\n",
                      "Example response = assistant.createExample(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String intent = \"hello\";\n",
                      "String example = \"Howdy!\";\n",
                      "\n",
                      "CreateExampleOptions options = new CreateExampleOptions.Builder(workspaceId, intent, example).build();\n",
                      "\n",
                      "Example response = assistant.createExample(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  intent: 'hello',\n",
                      "  text: 'Howdy!'\n",
                      "};\n",
                      "\n",
                      "assistant.createExample(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  intent: 'hello',\n",
                      "  text: 'Howdy!'\n",
                      "};\n",
                      "\n",
                      "assistant.createExample(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.create_example(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    intent='hello',\n",
                      "    text='Howdy!'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.create_example(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    intent='hello',\n",
                      "    text='Howdy!'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/workspaces/{workspace_id}/intents/{intent}/examples/{text}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspacePathParam"
        },
        {
          "$ref": "#/components/parameters/IntentPathParam"
        },
        {
          "in": "path",
          "name": "text",
          "required": true,
          "description": "The text of the user input example.",
          "schema": {
            "type": "string"
          }
        },
        {
          "$ref": "#/components/parameters/VersionQueryParam"
        }
      ],
      "get": {
        "operationId": "getExample",
        "summary": "Get user input example",
        "description": "Get information about a user input example.",
        "x-rate-limit": "This operation is limited to 6000 requests per 5 minutes.",
        "tags": [
          "Examples"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Example"
                },
                "examples": {
                  "response": {
                    "value": {
                      "text": "Good afternoon"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -u \"apikey:{apikey}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/intents/hello/examples/Good%20afternoon?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Authorization: Bearer {token}\" \"{url}/v1/workspaces/{workspace_id}/intents/hello/examples/Good%20afternoon?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.GetExample(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    intent: \"hello\",\n",
                      "    text: \"Good afternoon\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.GetExample(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    intent: \"hello\",\n",
                      "    text: \"Good afternoon\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String intent = \"hello\";\n",
                      "String example = \"Good afternoon\";\n",
                      "\n",
                      "GetExampleOptions options = new GetExampleOptions.Builder(workspaceId, intent, example).build();\n",
                      "\n",
                      "Example response = assistant.getExample(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String intent = \"hello\";\n",
                      "String example = \"Good afternoon\";\n",
                      "\n",
                      "GetExampleOptions options = new GetExampleOptions.Builder(workspaceId, intent, example).build();\n",
                      "\n",
                      "Example response = assistant.getExample(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  intent: 'hello',\n",
                      "  text: 'Good afternoon'\n",
                      "};\n",
                      "\n",
                      "assistant.getExample(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  intent: 'hello',\n",
                      "  text: 'Good afternoon'\n",
                      "};\n",
                      "\n",
                      "assistant.getExample(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.get_example(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    intent='hello',\n",
                      "    text='Good afternoon'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.get_example(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    intent='hello',\n",
                      "    text='Good afternoon'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "post": {
        "operationId": "updateExample",
        "summary": "Update user input example",
        "description": "Update the text of a user input example.\n\nIf you want to update multiple examples with a single API call, consider using the **[Update intent](#update-intent)** method instead.",
        "x-rate-limit": "This operation is limited to 1000 requests per 30 minutes.",
        "tags": [
          "Examples"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateExample"
              }
            }
          },
          "description": "The new text of the user input example.",
          "required": true
        },
        "x-codegen-request-body-name": "body",
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Example"
                },
                "examples": {
                  "response": {
                    "value": {
                      "text": "Hello there!"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" \\\n",
                      "--header \"Content-Type: application/json\" \\\n",
                      "--data \"{\\\"text\\\":\\\"Hello there!\\\"}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/intents/hello/examples/hi%20there?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Content-Type: application/json\" -X POST -H \"Authorization: Bearer {token}\" -d \"{\\\"text\\\":\\\"Hello there!\\\"}\" \"{url}/v1/workspaces/{workspace_id}/intents/hello/examples/hi%20there?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.UpdateExample(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    intent: \"hello\",\n",
                      "    text: \"Hi there\",\n",
                      "    newText: \"Hello there!\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.UpdateExample(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    intent: \"hello\",\n",
                      "    text: \"Hi there\",\n",
                      "    newText: \"Hello there!\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String intent = \"hello\";\n",
                      "String example = \"Hi there\";\n",
                      "String newText = \"Hello there!\";\n",
                      "\n",
                      "UpdateExampleOptions options = new UpdateExampleOptions.Builder(workspaceId, intent, example)\n",
                      "  .newText(newText)\n",
                      "  .build();\n",
                      "\n",
                      "Example response = assistant.updateExample(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String intent = \"hello\";\n",
                      "String example = \"Hi there\";\n",
                      "String newText = \"Hello there!\";\n",
                      "\n",
                      "UpdateExampleOptions options = new UpdateExampleOptions.Builder(workspaceId, intent, example)\n",
                      "  .newText(newText)\n",
                      "  .build();\n",
                      "\n",
                      "Example response = assistant.updateExample(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  intent: 'hello',\n",
                      "  text: 'Hi there',\n",
                      "  newText: 'Hello there!'         \n",
                      "};\n",
                      "\n",
                      "assistant.updateExample(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  intent: 'hello',\n",
                      "  text: 'Hi there',\n",
                      "  newText: 'Hello there!'         \n",
                      "};\n",
                      "\n",
                      "assistant.updateExample(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.update_example(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    intent='hello',\n",
                      "    text='Hi there',\n",
                      "    new_text='Hello there!'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.update_example(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    intent='hello',\n",
                      "    text='Hi there',\n",
                      "    new_text='Hello there!'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "operationId": "deleteExample",
        "summary": "Delete user input example",
        "description": "Delete a user input example from an intent.",
        "x-rate-limit": "This operation is limited to 1000 requests per 30 minutes.",
        "tags": [
          "Examples"
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE -u \"apikey:{apikey}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/intents/hello/examples/Good%20afternoon?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE -H \"Authorization: Bearer {token}\" \"{url}/v1/workspaces/{workspace_id}/intents/hello/examples/Good%20afternoon?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.DeleteExample(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    intent: \"hello\",\n",
                      "    text: \"Good afternoon\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.DeleteExample(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    intent: \"hello\",\n",
                      "    text: \"Good afternoon\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String intent = \"hello\";\n",
                      "String example = \"Good afternoon\";\n",
                      "\n",
                      "DeleteExampleOptions options = new DeleteExampleOptions.Builder(workspaceId, intent, example).build();\n",
                      "\n",
                      "assistant.deleteExample(options).execute();"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String intent = \"hello\";\n",
                      "String example = \"Good afternoon\";\n",
                      "\n",
                      "DeleteExampleOptions options = new DeleteExampleOptions.Builder(workspaceId, intent, example).build();\n",
                      "\n",
                      "assistant.deleteExample(options).execute();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  intent: 'hello',\n",
                      "  text: 'Good afternoon'\n",
                      "};\n",
                      "\n",
                      "assistant.deleteExample(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  intent: 'hello',\n",
                      "  text: 'Good afternoon'\n",
                      "};\n",
                      "\n",
                      "assistant.deleteExample(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.delete_example(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    intent='hello',\n",
                      "    text='Good afternoon'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.delete_example(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    intent='hello',\n",
                      "    text='Good afternoon'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/workspaces/{workspace_id}/dialog_nodes": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspacePathParam"
        },
        {
          "$ref": "#/components/parameters/VersionQueryParam"
        }
      ],
      "get": {
        "operationId": "listDialogNodes",
        "summary": "List dialog nodes",
        "description": "List the dialog nodes for a workspace.",
        "x-rate-limit": "This operation is limited to 2500 requests per 30 minutes.",
        "tags": [
          "Dialog nodes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageLimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/IncludeCountQueryParam"
          },
          {
            "in": "query",
            "name": "sort",
            "required": false,
            "description": "The attribute by which returned dialog nodes will be sorted. To reverse the sort order, prefix the value with a minus sign (`-`).",
            "schema": {
              "type": "string",
              "enum": [
                "dialog_node",
                "updated"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/CursorQueryParam"
          },
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DialogNodeCollection"
                },
                "examples": {
                  "response": {
                    "value": {
                      "dialog_nodes": [
                        {
                          "type": "standard",
                          "title": "Greeting",
                          "output": {
                            "generic": [
                              {
                                "values": [
                                  {
                                    "text": "Hi! How can I help you?"
                                  }
                                ],
                                "response_type": "text"
                              }
                            ]
                          },
                          "conditions": "#hello",
                          "dialog_node": "node_1_1479323581900"
                        }
                      ],
                      "pagination": {
                        "refresh_url": "/v1/workspaces/9978a49e-ea89-4493-b33d-82298d3db20d/dialog_nodes?version=2021-11-27"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -u \"apikey:{apikey}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/dialog_nodes?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Authorization: Bearer {token}\" \"{url}/v1/workspaces/{workspace_id}/dialog_nodes?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.ListDialogNodes(\n",
                      "    workspaceId: \"{workspaceId}\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.ListDialogNodes(\n",
                      "    workspaceId: \"{workspaceId}\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "\n",
                      "ListDialogNodesOptions options = new ListDialogNodesOptions.Builder(workspaceId).build();\n",
                      "\n",
                      "DialogNodeCollection response = assistant.listDialogNodes(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "\n",
                      "ListDialogNodesOptions options = new ListDialogNodesOptions.Builder(workspaceId).build();\n",
                      "\n",
                      "DialogNodeCollection response = assistant.listDialogNodes(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "};\n",
                      "\n",
                      "assistant.listDialogNodes(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "};\n",
                      "\n",
                      "assistant.listDialogNodes(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.list_dialog_nodes(\n",
                      "    workspace_id='{workspace_id}'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.list_dialog_nodes(\n",
                      "    workspace_id='{workspace_id}'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "post": {
        "operationId": "createDialogNode",
        "summary": "Create dialog node",
        "description": "Create a new dialog node.\n\nIf you want to create multiple dialog nodes with a single API call, consider using the **[Update workspace](#update-workspace)** method instead.",
        "x-rate-limit": "This operation is limited to 500 requests per 30 minutes.",
        "tags": [
          "Dialog nodes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DialogNode"
              }
            }
          },
          "description": "A CreateDialogNode object defining the content of the new dialog node.",
          "required": true
        },
        "x-codegen-request-body-name": "body",
        "responses": {
          "201": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DialogNode"
                },
                "examples": {
                  "response": {
                    "value": {
                      "type": "standard",
                      "title": "Greeting",
                      "conditions": "#hello",
                      "dialog_node": "node_1_1479323581900"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" \\\n",
                      "--header \"Content-Type: application/json\" \\\n",
                      "--data \"{\\\"dialog_node\\\": \\\"greeting\\\",\\\"conditions\\\":\\\"#hello\\\",\\\"output\\\":{\\\"generic\\\":[{\\\"response_type\\\":\\\"text\\\",\\\"values\\\":[{\\\"text\\\":\\\"Hi! How can I help you?\\\"}]}]},\\\"title\\\":\\\"Greeting\\\"}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/dialog_nodes?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Authorization: Bearer {token}\" -H \"Content-Type: application/json\" -X POST -d \"{\\\"dialog_node\\\": \\\"greeting\\\",\\\"conditions\\\":\\\"#hello\\\",\\\"output\\\":{\\\"generic\\\":[{\\\"response_type\\\":\\\"text\\\",\\\"values\\\":[{\\\"text\\\":\\\"Hi! How can I help you?\\\"}]}]},\\\"title\\\":\\\"Greeting\\\"}\" \"{url}/v1/workspaces/{workspace_id}/dialog_nodes?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.CreateDialogNode(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    dialogNode: \"greeting\"\n",
                      "    conditions: \"#hello\"\n",
                      "    title: \"Greeting\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.CreateDialogNode(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    dialogNode: \"greeting\"\n",
                      "    conditions: \"#hello\"\n",
                      "    title: \"Greeting\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String dialogNode = \"greeting\";\n",
                      "String conditions = \"#hello\";\n",
                      "String title = \"Greeting\";\n",
                      "\n",
                      "CreateDialogNodeOptions options = new CreateDialogNodeOptions.Builder(workspaceId, dialogNode)\n",
                      "  .conditions(conditions)\n",
                      "  .title(title)\n",
                      "  .build();\n",
                      "\n",
                      "DialogNode response = assistant.createDialogNode(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String dialogNode = \"greeting\";\n",
                      "String conditions = \"#hello\";\n",
                      "String title = \"Greeting\";\n",
                      "\n",
                      "CreateDialogNodeOptions options = new CreateDialogNodeOptions.Builder(workspaceId, dialogNode)\n",
                      "  .conditions(conditions)\n",
                      "  .title(title)\n",
                      "  .build();\n",
                      "\n",
                      "DialogNode response = assistant.createDialogNode(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  dialogNode: 'greeting',\n",
                      "  conditions: '#hello',\n",
                      "  title: 'Greeting'\n",
                      "};\n",
                      "\n",
                      "assistant.createDialogNode(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  dialogNode: 'greeting',\n",
                      "  conditions: '#hello',\n",
                      "  title: 'Greeting'\n",
                      "};\n",
                      "\n",
                      "assistant.createDialogNode(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.create_dialog_node(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    dialog_node='greeting',\n",
                      "    conditions='#hello',\n",
                      "    title='Greeting'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.create_dialog_node(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    dialog_node='greeting',\n",
                      "    conditions='#hello',\n",
                      "    title='Greeting'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/workspaces/{workspace_id}/dialog_nodes/{dialog_node}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspacePathParam"
        },
        {
          "$ref": "#/components/parameters/DialogNodePathParam"
        },
        {
          "$ref": "#/components/parameters/VersionQueryParam"
        }
      ],
      "get": {
        "operationId": "getDialogNode",
        "summary": "Get dialog node",
        "description": "Get information about a dialog node.",
        "x-rate-limit": "This operation is limited to 6000 requests per 5 minutes.",
        "tags": [
          "Dialog nodes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DialogNode"
                },
                "examples": {
                  "response": {
                    "value": {
                      "type": "standard",
                      "title": "Greeting",
                      "conditions": "#hello",
                      "dialog_node": "node_1_1479323581900"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -u \"apikey:{apikey}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/dialog_nodes/greeting?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Authorization: Bearer {token}\" \"{url}/v1/workspaces/{workspace_id}/dialog_nodes/greeting?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.GetDialogNode(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    dialogNode: \"greeting\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.GetDialogNode(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    dialogNode: \"greeting\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String dialogNode = \"greeting\";\n",
                      "\n",
                      "GetDialogNodeOptions options = new GetDialogNodeOptions.Builder(workspaceId, dialogNode).build();\n",
                      "\n",
                      "DialogNode response = assistant.getDialogNode(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String dialogNode = \"greeting\";\n",
                      "\n",
                      "GetDialogNodeOptions options = new GetDialogNodeOptions.Builder(workspaceId, dialogNode).build();\n",
                      "\n",
                      "DialogNode response = assistant.getDialogNode(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  dialogNode: 'greeting'\n",
                      "};\n",
                      "\n",
                      "assistant.getDialogNode(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  dialogNode: 'greeting'\n",
                      "};\n",
                      "\n",
                      "assistant.getDialogNode(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.get_dialog_node(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    dialog_node='greeting'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.get_dialog_node(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    dialog_node='greeting'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "post": {
        "operationId": "updateDialogNode",
        "summary": "Update dialog node",
        "description": "Update an existing dialog node with new or modified data.\n\nIf you want to update multiple dialog nodes with a single API call, consider using the **[Update workspace](#update-workspace)** method instead.",
        "x-rate-limit": "his operation is limited to 500 requests per 30 minutes.",
        "tags": [
          "Dialog nodes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDialogNode"
              }
            }
          },
          "description": "The updated content of the dialog node.\n\nAny elements included in the new data will completely replace the equivalent existing elements, including all subelements. (Previously existing subelements are not retained unless they are also included in the new data.) For example, if you update the actions for a dialog node, the previously existing actions are discarded and replaced with the new actions specified in the update.",
          "required": true
        },
        "x-codegen-request-body-name": "body",
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DialogNode"
                },
                "examples": {
                  "response": {
                    "value": {
                      "type": "standard",
                      "title": "Greeting",
                      "output": {
                        "generic": [
                          {
                            "values": [
                              {
                                "text": "Hello! What can I do for you?"
                              }
                            ],
                            "response_type": "text"
                          }
                        ]
                      },
                      "conditions": "#hello",
                      "dialog_node": "node_1_1479323581900"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" \\\n",
                      "--header \"Content-Type: application/json\" \\\n",
                      "--data \"{\\\"output\\\":{\\\"generic\\\":[{\\\"response_type\\\":\\\"text\\\",\\\"values\\\":[{\\\"text\\\":\\\"Hello! What can I do for you?\\\"}]}]}}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/dialog_nodes/greeting?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Authorization: Bearer {token}\" -H \"Content-Type: application/json\" -X POST -d \"{\\\"output\\\":{\\\"generic\\\":[{\\\"response_type\\\":\\\"text\\\",\\\"values\\\":[{\\\"text\\\":\\\"Hello! What can I do for you?\\\"}]}]}}\" \"{url}/v1/workspaces/{workspace_id}/dialog_nodes/greeting?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.UpdateDialogNode(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    dialogNode: \"greeting\",\n",
                      "    newOutput: new DialogNodeOutput()\n",
                      "    {\n",
                      "        Generic = new List<DialogNodeOutputGeneric>()\n",
                      "        {\n",
                      "            new DialogNodeOutputGeneric()\n",
                      "            {\n",
                      "                ResponseType = \"text\",\n",
                      "                Values = new List<DialogNodeOutputTextValuesElement>()\n",
                      "                {\n",
                      "                    new DialogNodeOutputTextValuesElement()\n",
                      "                    {\n",
                      "                        Text = \"Hello! What can I do for you?\"\n",
                      "                    }\n",
                      "                }\n",
                      "            }\n",
                      "        }\n",
                      "    }\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.UpdateDialogNode(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    dialogNode: \"greeting\",\n",
                      "    newOutput: new DialogNodeOutput()\n",
                      "    {\n",
                      "        Generic = new List<DialogNodeOutputGeneric>()\n",
                      "        {\n",
                      "            new DialogNodeOutputGeneric()\n",
                      "            {\n",
                      "                ResponseType = \"text\",\n",
                      "                Values = new List<DialogNodeOutputTextValuesElement>()\n",
                      "                {\n",
                      "                    new DialogNodeOutputTextValuesElement()\n",
                      "                    {\n",
                      "                        Text = \"Hello! What can I do for you?\"\n",
                      "                    }\n",
                      "                }\n",
                      "            }\n",
                      "        }\n",
                      "    }\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String dialogNode = \"greeting\";\n",
                      "\n",
                      "List<DialogNodeOutputTextValuesElement> newValues = new ArrayList<>();\n",
                      "DialogNodeOutputTextValuesElement newText = new DialogNodeOutputTextValuesElement();\n",
                      "newText.setText(\"Hello! What can I do for you?\");\n",
                      "newValues.add(newText);\n",
                      "\n",
                      "List<DialogNodeOutputGeneric> newGeneric = new ArrayList<>();\n",
                      "DialogNodeOutputGeneric newGenericResponse = new DialogNodeOutputGeneric();\n",
                      "newGenericResponse.setResponseType(DialogNodeOutputGeneric.ResponseType.TEXT);\n",
                      "newGenericResponse.setValues(newValues);\n",
                      "newGeneric.add(newGenericResponse);\n",
                      "\n",
                      "DialogNodeOutput newOutput = new DialogNodeOutput();\n",
                      "newOutput.setGeneric(newGeneric);\n",
                      "\n",
                      "UpdateDialogNodeOptions options = new UpdateDialogNodeOptions.Builder(workspaceId, dialogNode)\n",
                      "  .newOutput(newOutput)\n",
                      "  .build();\n",
                      "\n",
                      "DialogNode response = assistant.updateDialogNode(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String dialogNode = \"greeting\";\n",
                      "\n",
                      "List<DialogNodeOutputTextValuesElement> newValues = new ArrayList<>();\n",
                      "DialogNodeOutputTextValuesElement newText = new DialogNodeOutputTextValuesElement();\n",
                      "newText.setText(\"Hello! What can I do for you?\");\n",
                      "newValues.add(newText);\n",
                      "\n",
                      "List<DialogNodeOutputGeneric> newGeneric = new ArrayList<>();\n",
                      "DialogNodeOutputGeneric newGenericResponse = new DialogNodeOutputGeneric();\n",
                      "newGenericResponse.setResponseType(DialogNodeOutputGeneric.ResponseType.TEXT);\n",
                      "newGenericResponse.setValues(newValues);\n",
                      "newGeneric.add(newGenericResponse);\n",
                      "\n",
                      "DialogNodeOutput newOutput = new DialogNodeOutput();\n",
                      "newOutput.setGeneric(newGeneric);\n",
                      "\n",
                      "UpdateDialogNodeOptions options = new UpdateDialogNodeOptions.Builder(workspaceId, dialogNode)\n",
                      "  .newOutput(newOutput)\n",
                      "  .build();\n",
                      "\n",
                      "DialogNode response = assistant.updateDialogNode(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  dialogNode: 'greeting',\n",
                      "  newOutput: {\n",
                      "    generic: [\n",
                      "      {\n",
                      "        response_type: 'text',\n",
                      "        values: [\n",
                      "          {\n",
                      "            text: 'Hello! What can I do for you?'\n",
                      "          }\n",
                      "        ]\n",
                      "      }\n",
                      "    ],\n",
                      "  title: 'Greeting'\n",
                      "  }\n",
                      "};\n",
                      "\n",
                      "assistant.updateDialogNode(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  dialogNode: 'greeting',\n",
                      "  newOutput: {\n",
                      "    generic: [\n",
                      "      {\n",
                      "        response_type: 'text',\n",
                      "        values: [\n",
                      "          {\n",
                      "            text: 'Hello! What can I do for you?'\n",
                      "          }\n",
                      "        ]\n",
                      "      }\n",
                      "    ],\n",
                      "  title: 'Greeting'\n",
                      "  }\n",
                      "};\n",
                      "\n",
                      "assistant.updateDialogNode(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.update_dialog_node(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    dialog_node='greeting',\n",
                      "    new_output={\n",
                      "        'generic': [\n",
                      "            {\n",
                      "                'response_type': 'text',\n",
                      "                'values': [\n",
                      "                    {\n",
                      "                        'text': 'Hello! What can I do for you?'\n",
                      "                    }\n",
                      "                ]\n",
                      "            }\n",
                      "        ]\n",
                      "    }\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.update_dialog_node(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    dialog_node='greeting',\n",
                      "    new_output={\n",
                      "        'generic': [\n",
                      "            {\n",
                      "                'response_type': 'text',\n",
                      "                'values': [\n",
                      "                    {\n",
                      "                        'text': 'Hello! What can I do for you?'\n",
                      "                    }\n",
                      "                ]\n",
                      "            }\n",
                      "        ]\n",
                      "    }\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "operationId": "deleteDialogNode",
        "summary": "Delete dialog node",
        "description": "Delete a dialog node from a workspace.",
        "x-rate-limit": "This operation is limited to 500 requests per 30 minutes.",
        "tags": [
          "Dialog nodes"
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE -u \"apikey:{apikey}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/dialog_nodes/greeting?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE -H \"Authorization: Bearer {token}\" \"{url}/v1/workspaces/{workspace_id}/dialog_nodes/greeting?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.DeleteDialogNode(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    dialogNode: \"greeting\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.DeleteDialogNode(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    dialogNode: \"greeting\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String dialogNode = \"greeting\";\n",
                      "\n",
                      "DeleteDialogNodeOptions options = new DeleteDialogNodeOptions.Builder(workspaceId, dialogNode).build();\n",
                      "\n",
                      "assistant.deleteDialogNode(options).execute();"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String dialogNode = \"greeting\";\n",
                      "\n",
                      "DeleteDialogNodeOptions options = new DeleteDialogNodeOptions.Builder(workspaceId, dialogNode).build();\n",
                      "\n",
                      "assistant.deleteDialogNode(options).execute();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  dialogNode: 'greeting'\n",
                      "};\n",
                      "\n",
                      "assistant.deleteDialogNode(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  dialogNode: 'greeting'\n",
                      "};\n",
                      "\n",
                      "assistant.deleteDialogNode(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.delete_dialog_node(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    dialog_node='greeting'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.delete_dialog_node(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    dialog_node='greeting'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/workspaces": {
      "parameters": [
        {
          "$ref": "#/components/parameters/VersionQueryParam"
        }
      ],
      "get": {
        "operationId": "listWorkspaces",
        "summary": "List workspaces",
        "description": "List the workspaces associated with a Watson Assistant service instance.",
        "x-rate-limit": "This operation is limited to 500 requests per 30 minutes.",
        "tags": [
          "Workspaces"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageLimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/IncludeCountQueryParam"
          },
          {
            "in": "query",
            "name": "sort",
            "required": false,
            "description": "The attribute by which returned workspaces will be sorted. To reverse the sort order, prefix the value with a minus sign (`-`).",
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "updated"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/CursorQueryParam"
          },
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceCollection"
                },
                "examples": {
                  "response": {
                    "value": {
                      "workspaces": [
                        {
                          "name": "Car_Dashboard",
                          "language": "en",
                          "metadata": {
                            "runtime_version": "2021-11-27"
                          },
                          "description": "Cognitive Car workspace which allows multi-turn conversations to perform tasks in the car.",
                          "workspace_id": "0a0c06c1-8e31-4655-9067-58fcac5134fc",
                          "learning_opt_out": false
                        },
                        {
                          "name": "testing",
                          "language": "en",
                          "metadata": {
                            "runtime_version": "2021-11-27"
                          },
                          "workspace_id": "e42c8e5c-eb34-4b65-99f0-59f9329b66ec",
                          "learning_opt_out": false
                        },
                        {
                          "name": "workspace-example",
                          "language": "en",
                          "metadata": {
                            "runtime_version": "2021-11-27"
                          },
                          "description": "Example workspace to try out the service",
                          "workspace_id": "293b58fc-3c5b-4ac5-a8f4-8d52c393d875",
                          "learning_opt_out": false
                        }
                      ],
                      "pagination": {
                        "refresh_url": "/v1/workspaces?version=2021-11-27"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -u \"apikey:{apikey}\" \\\n",
                      "\"{url}/v1/workspaces?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Authorization: Bearer {token}\" \"{url}/v1/workspaces?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.ListWorkspaces();\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.ListWorkspaces();\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "ListWorkspacesOptions options = new ListWorkspacesOptions.Builder().build();\n",
                      "\n",
                      "WorkspaceCollection workspaces = assistant.listWorkspaces(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(workspaces);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "ListWorkspacesOptions options = new ListWorkspacesOptions.Builder().build();\n",
                      "\n",
                      "WorkspaceCollection workspaces = assistant.listWorkspaces(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(workspaces);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "assistant.listWorkspaces()\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "assistant.listWorkspaces()\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.list_workspaces().get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.list_workspaces().get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "post": {
        "operationId": "createWorkspace",
        "summary": "Create workspace",
        "description": "Create a workspace based on component objects. You must provide workspace components defining the content of the new workspace.\n\n**Note:** The new workspace data cannot be larger than 1.5 MB. For larger requests, use the **Create workspace asynchronously** method.",
        "x-rate-limit": "This operation is limited to 30 requests per 30 minutes.",
        "tags": [
          "Workspaces"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkspace"
              }
            }
          }
        },
        "x-codegen-request-body-name": "body",
        "responses": {
          "201": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workspace"
                },
                "examples": {
                  "response": {
                    "value": {
                      "name": "API test",
                      "language": "en",
                      "description": "Example workspace created via API.",
                      "workspace_id": "245edf96-b89f-46ac-b647-c6618b2eb5f0",
                      "learning_opt_out": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" \\\n",
                      "--header \"Content-Type: application/json\" \\\n",
                      "--data \"{\\\"name\\\":\\\"API test\\\",\\\"intents\\\":[],\\\"entities\\\":[],\\\"language\\\":\\\"en\\\",\\\"description\\\":\\\"Example workspace created via API.\\\",\\\"dialog_nodes\\\":[]}\" \\\n",
                      "\"{url}/v1/workspaces?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Content-Type: application/json\" -X POST -H \"Authorization: Bearer {token}\" -d \"{\\\"name\\\":\\\"API test\\\",\\\"intents\\\":[],\\\"entities\\\":[],\\\"language\\\":\\\"en\\\",\\\"description\\\":\\\"Example workspace created via API.\\\",\\\"dialog_nodes\\\":[]}\" \"{url}/v1/workspaces?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.CreateWorkspace(\n",
                      "    name: \"API test\",\n",
                      "    description: \"Example workspace created via API\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.CreateWorkspace(\n",
                      "    name: \"API test\",\n",
                      "    description: \"Example workspace created via API\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceName = \"API test\";\n",
                      "String workspaceDescription = \"Example workspace created via API\";\n",
                      "\n",
                      "CreateWorkspaceOptions options = new CreateWorkspaceOptions.Builder()\n",
                      "  .name(workspaceName)\n",
                      "  .description(workspaceDescription)\n",
                      "  .build();\n",
                      "\n",
                      "Workspace response = assistant.createWorkspace(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceName = \"API test\";\n",
                      "String workspaceDescription = \"Example workspace created via API\";\n",
                      "\n",
                      "CreateWorkspaceOptions options = new CreateWorkspaceOptions.Builder()\n",
                      "  .name(workspaceName)\n",
                      "  .description(workspaceDescription)\n",
                      "  .build();\n",
                      "\n",
                      "Workspace response = assistant.createWorkspace(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const workspace = {\n",
                      "  name: 'API test',\n",
                      "  description: 'Example workspace created via API.'\n",
                      "};\n",
                      "\n",
                      "assistant.createWorkspace(workspace)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const workspace = {\n",
                      "  name: 'API test',\n",
                      "  description: 'Example workspace created via API.'\n",
                      "};\n",
                      "\n",
                      "assistant.createWorkspace(workspace)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.create_workspace(\n",
                      "    name='API test',\n",
                      "    description='Example workspace created via API'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.create_workspace(\n",
                      "    name='API test',\n",
                      "    description='Example workspace created via API'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/workspaces/{workspace_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspacePathParam"
        },
        {
          "$ref": "#/components/parameters/VersionQueryParam"
        }
      ],
      "get": {
        "operationId": "getWorkspace",
        "summary": "Get information about a workspace",
        "description": "Get information about a workspace, optionally including all workspace content.",
        "x-rate-limit": "With **export**=`false`, this operation is limited to 6000 requests per 5 minutes. With **export**=`true`, the limit is 20 requests per 30 minutes.",
        "tags": [
          "Workspaces"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ExportQueryParam"
          },
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          },
          {
            "in": "query",
            "name": "sort",
            "required": false,
            "description": "Indicates how the returned workspace data will be sorted. This parameter is valid only if **export**=`true`. Specify `sort=stable` to sort all workspace objects by unique identifier, in ascending alphabetical order.",
            "schema": {
              "type": "string",
              "enum": [
                "stable"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workspace"
                },
                "examples": {
                  "response": {
                    "value": {
                      "name": "Pizza app",
                      "language": "en",
                      "metadata": {},
                      "description": "Pizza app",
                      "status": "Available",
                      "workspace_id": "pizza_app-e0f3",
                      "learning_opt_out": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -u \"apikey:{apikey}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Authorization: Bearer {token}\" \"{url}/v1/workspaces/{workspace_id}?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.GetWorkspace(\n",
                      "    workspaceId: \"{workspaceId}\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.GetWorkspace(\n",
                      "    workspaceId: \"{workspaceId}\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "\n",
                      "GetWorkspaceOptions options = new GetWorkspaceOptions.Builder(workspaceId).build();\n",
                      "\n",
                      "Workspace response = assistant.getWorkspace(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "\n",
                      "GetWorkspaceOptions options = new GetWorkspaceOptions.Builder(workspaceId).build();\n",
                      "\n",
                      "Workspace response = assistant.getWorkspace(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}'\n",
                      "};\n",
                      "\n",
                      "assistant.getWorkspace(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}'\n",
                      "};\n",
                      "\n",
                      "assistant.getWorkspace(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.get_workspace(\n",
                      "    workspace_id='{workspace_id}'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.get_workspace(\n",
                      "    workspace_id='{workspace_id}'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "post": {
        "operationId": "updateWorkspace",
        "summary": "Update workspace",
        "description": "Update an existing workspace with new or modified data. You must provide component objects defining the content of the updated workspace.\n\n**Note:** The new workspace data cannot be larger than 1.5 MB. For larger requests, use the **Update workspace asynchronously** method.",
        "x-rate-limit": "This operation is limited to 30 request per 30 minutes.",
        "tags": [
          "Workspaces"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "append",
            "required": false,
            "description": "Whether the new data is to be appended to the existing data in the object. If **append**=`false`, elements included in the new data completely replace the corresponding existing elements, including all subelements. For example, if the new data for a workspace includes **entities** and **append**=`false`, all existing entities in the workspace are discarded and replaced with the new entities.\n\nIf **append**=`true`, existing elements are preserved, and the new elements are added. If any elements in the new data collide with existing elements, the update request fails.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkspace"
              }
            }
          },
          "description": "Valid data defining the new and updated workspace content.\n\nThe maximum size for this data is 50MB. If you need to import a larger amount of workspace data, consider importing components such as intents and entities using separate operations."
        },
        "x-codegen-request-body-name": "body",
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workspace"
                },
                "examples": {
                  "response": {
                    "value": {
                      "name": "Updated workspace",
                      "language": "en",
                      "description": "Example workspace modified via API",
                      "workspace_id": "164cca2d-8af7-4034-a121-89049a665183",
                      "learning_opt_out": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" \\\n",
                      "--header \"Content-Type: application/json\" \\\n",
                      "--data \"{\\\"name\\\":\\\"Updated workspace\\\",\\\"intents\\\":[],\\\"entities\\\":[],\\\"language\\\":\\\"en\\\",\\\"description\\\":\\\"Example workspace updated via API.\\\",\\\"dialog_nodes\\\":[]}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -H \"Content-Type: application/json\" -X POST -H \"Authorization: Bearer {token}\" -d \"{\\\"name\\\":\\\"Updated workspace\\\",\\\"intents\\\":[],\\\"entities\\\":[],\\\"language\\\":\\\"en\\\",\\\"description\\\":\\\"Example workspace updated via API.\\\",\\\"dialog_nodes\\\":[]}\" \"{url}/v1/workspaces/{workspace_id}?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.UpdateWorkspace(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    name: \"Updated workspace\",\n",
                      "    description: \"Example workspace updated via API\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.UpdateWorkspace(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    name: \"Updated workspace\",\n",
                      "    description: \"Example workspace updated via API\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String workspaceName = \"Updated workspace\";\n",
                      "String workspaceDescription = \"Example workspace updated via API.\";\n",
                      "\n",
                      "UpdateWorkspaceOptions options = new UpdateWorkspaceOptions.Builder(workspaceId)\n",
                      "  .name(workspaceName)\n",
                      "  .description(workspaceDescription)\n",
                      "  .build();\n",
                      "\n",
                      "Workspace response = assistant.updateWorkspace(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "String workspaceName = \"Updated workspace\";\n",
                      "String workspaceDescription = \"Example workspace updated via API.\";\n",
                      "\n",
                      "UpdateWorkspaceOptions options = new UpdateWorkspaceOptions.Builder(workspaceId)\n",
                      "  .name(workspaceName)\n",
                      "  .description(workspaceDescription)\n",
                      "  .build();\n",
                      "\n",
                      "Workspace response = assistant.updateWorkspace(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  name: 'Updated workspace',\n",
                      "  description: 'Test workspace modified via API.'\n",
                      "};\n",
                      "\n",
                      "assistant.updateWorkspace(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  name: 'Updated workspace',\n",
                      "  description: 'Test workspace modified via API.'\n",
                      "};\n",
                      "\n",
                      "assistant.updateWorkspace(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.update_workspace(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    name='Updated workspace',\n",
                      "    description='Example workspace updated via API'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.update_workspace(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    name='Updated workspace',\n",
                      "    description='Example workspace updated via API'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      },
      "delete": {
        "operationId": "deleteWorkspace",
        "summary": "Delete workspace",
        "description": "Delete a workspace from the service instance.",
        "x-rate-limit": "This operation is limited to 30 requests per 30 minutes.",
        "tags": [
          "Workspaces"
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE -u \"apikey:{apikey}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE -H \"Authorization: Bearer {token}\" \"{url}/v1/workspaces/{workspace_id}?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.DeleteWorkspace(\n",
                      "    workspaceId: \"{workspaceId}\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.DeleteWorkspace(\n",
                      "    workspaceId: \"{workspaceId}\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "\n",
                      "DeleteWorkspaceOptions options = new DeleteWorkspaceOptions.Builder(workspaceId).build();\n",
                      "\n",
                      "assistant.deleteWorkspace(options).execute();"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "\n",
                      "DeleteWorkspaceOptions options = new DeleteWorkspaceOptions.Builder(workspaceId).build();\n",
                      "\n",
                      "assistant.deleteWorkspace(options).execute();"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '036fdc1e-71a3-432f-a404-0e4b4de6acad'\n",
                      "};\n",
                      "\n",
                      "assistant.deleteWorkspace(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '036fdc1e-71a3-432f-a404-0e4b4de6acad'\n",
                      "};\n",
                      "\n",
                      "assistant.deleteWorkspace(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.delete_workspace(\n",
                      "    workspace_id='{workspace_id}'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.delete_workspace(\n",
                      "    workspace_id='{workspace_id}'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/workspaces/{workspace_id}/message": {
      "post": {
        "operationId": "message",
        "summary": "Get response to user input",
        "description": "Send user input to a workspace and receive a response.\n\n**Important:** This method has been superseded by the new v2 runtime API. The v2 API offers significant advantages, including ease of deployment, automatic state management, versioning, and search capabilities. For more information, see the [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-api-overview).",
        "x-rate-limit": "There is no rate limit for this operation.",
        "tags": [
          "Message"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "workspace_id",
            "required": true,
            "description": "Unique identifier of the workspace.",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/VersionQueryParam"
          },
          {
            "in": "query",
            "name": "nodes_visited_details",
            "required": false,
            "description": "Whether to include additional diagnostic information about the dialog nodes that were visited during processing of the message.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageRequest"
              }
            }
          },
          "description": "The message to be sent. This includes the user's input, along with optional intents, entities, and context from the last response."
        },
        "x-codegen-request-body-name": "body",
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "intents": [
                        {
                          "intent": "hello",
                          "confidence": 0.9755029201507568
                        }
                      ],
                      "entities": [],
                      "input": {
                        "text": "Hello"
                      },
                      "output": {
                        "generic": [
                          {
                            "response_type": "text",
                            "text": "Hello! What can I do for you?"
                          }
                        ],
                        "text": [
                          "Hello! What can I do for you?"
                        ],
                        "nodes_visited": [
                          "greeting"
                        ],
                        "log_messages": []
                      },
                      "context": {
                        "conversation_id": "a96ec62f-773c-4e84-8be9-f9dbca9f83d0",
                        "system": {
                          "dialog_stack": [
                            {
                              "dialog_node": "root"
                            }
                          ],
                          "dialog_turn_counter": 1,
                          "dialog_request_counter": 1,
                          "_node_output_map": {
                            "greeting": {
                              "0": [
                                0,
                                0
                              ]
                            }
                          },
                          "branch_exited": true,
                          "branch_exited_reason": "completed"
                        },
                        "metadata": {
                          "user_id": "a96ec62f-773c-4e84-8be9-f9dbca9f83d0"
                        }
                      },
                      "user_id": "a96ec62f-773c-4e84-8be9-f9dbca9f83d0"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" \\\n",
                      "--header \"Content-Type:application/json\" \\\n",
                      "--data \"{\\\"input\\\": {\\\"text\\\": \\\"Hello\\\"}}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/message?version=2021-06-14\""
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -H \"Authorization: Bearer {token}\" --header \"Content-Type:application/json\" --data \"{\\\"input\\\": {\\\"text\\\": \\\"Hello\\\"}}\" \"{url}/v1/workspaces/{workspace_id}/message?version=2020-04-01\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.Message(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    input: new MessageInput()\n",
                      "    {\n",
                      "        Text = \"Hello\"\n",
                      "    }\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\n",
                      "    url: \"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\",\n",
                      "    username: \"{username}\",\n",
                      "    password: \"{password}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2020-04-01\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.Message(\n",
                      "    workspaceId: \"{workspaceId}\",\n",
                      "    input: new MessageInput()\n",
                      "    {\n",
                      "        Text = \"Hello\"\n",
                      "    }\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "\n",
                      "MessageInput input = new MessageInput();\n",
                      "input.setText(\"Hello\");\n",
                      "\n",
                      "MessageOptions options = new MessageOptions.Builder(workspaceId)\n",
                      "  .input(input)\n",
                      "  .build();\n",
                      "\n",
                      "MessageResponse response = assistant.message(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "CloudPakForDataAuthenticator authenticator = new CloudPakForDataAuthenticator(\"https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize\", \"{username}\", \"{password}\");\n",
                      "Assistant assistant = new Assistant(\"2020-04-01\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "\n",
                      "MessageInput input = new MessageInput();\n",
                      "input.setText(\"Hello\");\n",
                      "\n",
                      "MessageOptions options = new MessageOptions.Builder(workspaceId)\n",
                      "  .input(input)\n",
                      "  .build();\n",
                      "\n",
                      "MessageResponse response = assistant.message(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "assistant.message({\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  input: {'text': 'Hello'}\n",
                      "  })\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { CloudPakForDataAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2020-04-01',\n",
                      "  authenticator: new CloudPakForDataAuthenticator({\n",
                      "    username: '{username}',\n",
                      "    password: '{password}',\n",
                      "    url: 'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "assistant.message({\n",
                      "  workspaceId: '{workspace_id}',\n",
                      "  input: {'text': 'Hello'}\n",
                      "  })\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response = assistant.message(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    input={\n",
                      "        'text': 'Hello'\n",
                      "    }\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              },
              {
                "name": "Example request for IBM Cloud Pak for Data",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import CloudPakForDataAuthenticator\n",
                      "\n",
                      "authenticator = CloudPakForDataAuthenticator(\n",
                      "    '{username}',\n",
                      "    '{password}',\n",
                      "    'https://{cpd_cluster_host}{:port}/icp4d-api/v1/authorize'\n",
                      ")\n",
                      "assistant = AssistantV1(\n",
                      "    version='2020-04-01',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response = assistant.message(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    input={\n",
                      "        'text': 'Hello'\n",
                      "    }\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/workspaces/{workspace_id}/logs": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspacePathParam"
        },
        {
          "$ref": "#/components/parameters/VersionQueryParam"
        }
      ],
      "get": {
        "operationId": "listLogs",
        "summary": "List log events in a workspace",
        "description": "List the events from the log of a specific workspace.\n\nThis method requires Manager access.\n\n**Note:** If you use the **cursor** parameter to retrieve results one page at a time, subsequent requests must be no more than 5 minutes apart. Any returned value for the **cursor** parameter becomes invalid after 5 minutes. For more information about using pagination, see [Pagination](#pagination).",
        "x-rate-limit": "If **cursor** is not specified, this operation is limited to 40 requests per 30 minutes. If **cursor** is specified, the limit is 120 requests per minute.",
        "tags": [
          "Logs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/LogSortQueryParam"
          },
          {
            "in": "query",
            "name": "filter",
            "required": false,
            "description": "A cacheable parameter that limits the results to those matching the specified filter. For more information, see the [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-filter-reference#filter-reference).",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/PageLimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/CursorQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogCollection"
                },
                "examples": {
                  "response": {
                    "value": {
                      "logs": [
                        {
                          "request": {
                            "input": {
                              "text": "Good morning"
                            }
                          },
                          "response": {
                            "intents": [
                              {
                                "intent": "hello",
                                "confidence": 1
                              }
                            ],
                            "entities": [],
                            "input": {
                              "text": "Good morning"
                            },
                            "output": {
                              "text": [
                                "Hi! What can I do for you?"
                              ],
                              "nodes_visited": [
                                "node_2_1501875253968"
                              ],
                              "log_messages": []
                            },
                            "context": {
                              "conversation_id": "30001db8-d2f9-4530-9e81-80fc75725209",
                              "system": {
                                "dialog_stack": [
                                  {
                                    "dialog_node": "root"
                                  }
                                ],
                                "dialog_turn_counter": 1,
                                "dialog_request_counter": 1,
                                "_node_output_map": {
                                  "node_2_1501875253968": [
                                    0
                                  ]
                                },
                                "branch_exited": true,
                                "branch_exited_reason": "completed"
                              }
                            }
                          },
                          "language": "en",
                          "workspace_id": "{workspace_id}",
                          "request_timestamp": "2017-09-13T16:39:56.284Z",
                          "response_timestamp": "2017-09-13T16:39:58.828Z",
                          "log_id": "dcceece9-acfc-49aa-94c3-ddc2b9776cbe"
                        }
                      ],
                      "pagination": {}
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -u \"apikey:{apikey}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/logs?version=2021-06-14\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.ListLogs(\n",
                      "    workspaceId: \"{workspaceId}\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String workspaceId = \"{workspace_id}\";\n",
                      "\n",
                      "ListLogsOptions options = new ListLogsOptions.Builder(workspaceId).build();\n",
                      "\n",
                      "LogCollection response = assistant.listLogs(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{workspace_id}'\n",
                      "};\n",
                      "\n",
                      "assistant.listLogs(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.list_logs(\n",
                      "    workspace_id='{workspace_id}'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/logs": {
      "parameters": [
        {
          "$ref": "#/components/parameters/VersionQueryParam"
        }
      ],
      "get": {
        "operationId": "listAllLogs",
        "summary": "List log events in all workspaces",
        "description": "List the events from the logs of all workspaces in the service instance.\n\n**Note:** If you use the **cursor** parameter to retrieve results one page at a time, subsequent requests must be no more than 5 minutes apart. Any returned value for the **cursor** parameter becomes invalid after 5 minutes. For more information about using pagination, see [Pagination](#pagination).",
        "x-rate-limit": "If **cursor** is not specified, this operation is limited to 40 requests per 30 minutes. If **cursor** is specified, the limit is 120 requests per minute.",
        "tags": [
          "Logs"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "required": true,
            "description": "A cacheable parameter that limits the results to those matching the specified filter. You must specify a filter query that includes a value for `language`, as well as a value for `request.context.system.assistant_id`, `workspace_id`, or `request.context.metadata.deployment`. These required filters must be specified using the exact match (`::`) operator. For more information, see the [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-filter-reference#filter-reference).",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/LogSortQueryParam"
          },
          {
            "$ref": "#/components/parameters/PageLimitQueryParam"
          },
          {
            "$ref": "#/components/parameters/CursorQueryParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogCollection"
                },
                "examples": {
                  "response": {
                    "value": {
                      "logs": [
                        {
                          "request": {
                            "input": {
                              "text": "Good morning"
                            },
                            "context": {
                              "metadata": {
                                "deployment": "deployment_1"
                              }
                            }
                          },
                          "response": {
                            "intents": [
                              {
                                "intent": "hello",
                                "confidence": 1
                              }
                            ],
                            "entities": [],
                            "input": {
                              "text": "Good morning"
                            },
                            "output": {
                              "text": [
                                "Hi! What can I do for you?"
                              ],
                              "nodes_visited": [
                                "node_2_1501875253968"
                              ],
                              "log_messages": []
                            },
                            "context": {
                              "metadata": {
                                "deployment": "testDeployment"
                              },
                              "conversation_id": "81a43b48-7dca-4a7d-a0d7-6fed03fcee69",
                              "system": {
                                "dialog_stack": [
                                  {
                                    "dialog_node": "root"
                                  }
                                ],
                                "dialog_turn_counter": 1,
                                "dialog_request_counter": 1,
                                "_node_output_map": {
                                  "node_2_1501875253968": [
                                    0
                                  ]
                                },
                                "branch_exited": true,
                                "branch_exited_reason": "completed"
                              }
                            }
                          },
                          "language": "en",
                          "workspace_id": "{workspace_id}",
                          "request_timestamp": "2017-09-13T19:52:32.611Z",
                          "response_timestamp": "2017-09-13T19:52:32.628Z",
                          "log_id": "aa886a8a-bac5-4b91-8323-2fd61a69c9d3"
                        }
                      ],
                      "pagination": {}
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -u \"apikey:{apikey}\" \\\n",
                      "\"{url}/v1/logs?version=2021-06-14&filter=(language::en,request.context.metadata.deployment::testDeployment)\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.ListAllLogs(\n",
                      "    filter: \"language::en,request.context.metadata.deployment::testDeployment\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String filter = \"language::en,request.context.metadata.deployment::testDeployment\";\n",
                      "\n",
                      "ListAllLogsOptions options = new ListAllLogsOptions.Builder(filter).build();\n",
                      "\n",
                      "LogCollection response = assistant.listAllLogs(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  filter: 'language::en,request.context.metadata.deployment::testDeployment'\n",
                      "};\n",
                      "\n",
                      "assistant.listAllLogs(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.list_all_logs(\n",
                      "    filter='language::en,request.context.metadata.deployment::testDeployment'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/workspaces/{workspace_id}/bulk_classify": {
      "post": {
        "operationId": "bulkClassify",
        "summary": "Identify intents and entities in multiple user utterances",
        "description": "Send multiple user inputs to a workspace in a single request and receive information about the intents and entities recognized in each input. This method is useful for testing and comparing the performance of different workspaces.\n\nThis method is available only with Enterprise with Data Isolation plans.",
        "x-rate-limit": "This operation is limited to 5 requests per minute.",
        "tags": [
          "Bulk classify"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/WorkspacePathParam"
          },
          {
            "$ref": "#/components/parameters/VersionQueryParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkClassifyInput"
              }
            }
          },
          "description": "An input object that includes the text to classify."
        },
        "x-codegen-request-body-name": "request",
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkClassifyResponse"
                },
                "examples": {
                  "response": {
                    "value": {
                      "output": [
                        {
                          "input": {
                            "text": "I want to order some coffee"
                          },
                          "entities": [
                            {
                              "entity": "beverage",
                              "value": "coffee",
                              "confidence": 1,
                              "location": [
                                14,
                                20
                              ],
                              "groups": null,
                              "role": null
                            }
                          ],
                          "intents": [
                            {
                              "intent": "order",
                              "confidence": 0.1588214785085711
                            },
                            {
                              "intent": "goodbye",
                              "confidence": 0.041231044110733354
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X POST -u \"apikey:{apikey}\" \\\n",
                      "--header \"Content-Type:application/json\" \\\n",
                      "--data \"{\\\"input\\\": [{\\\"text\\\": \\\"I want to order some coffee\\\"}]}\" \\\n",
                      "\"{url}/v1/workspaces/{workspace_id}/bulk_classify?version=2021-06-14\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "List<BulkClassifyUtterance> bulkClassifyUtterances = new List<BulkClassifyUtterance>();\n",
                      "BulkClassifyUtterance bulkClassifyUtterance = new BulkClassifyUtterance();\n",
                      "bulkClassifyUtterance.Text = \"I want to order some coffee\";\n",
                      "bulkClassifyUtterances.Add(bulkClassifyUtterance);\n",
                      "var result = assistant.BulkClassify(workspaceId:\"{workspaceId}\", input: bulkClassifyUtterances);\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "BulkClassifyUtterance bulkClassifyUtterance = new BulkClassifyUtterance.Builder()\n",
                      "  .text(\"I want to order some coffee\")\n",
                      "  .build();\n",
                      "\n",
                      "BulkClassifyOptions options = new BulkClassifyOptions.Builder()\n",
                      "  .workspaceId(\"{workspace_id}\")\n",
                      "  .addInput(bulkClassifyUtterance)\n",
                      "  .build();\n",
                      "\n",
                      "BulkClassifyResponse response = assistant.bulkClassify(options).execute().getResult();\n",
                      "\n",
                      "System.out.println(response);"
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  workspaceId: '{id}'\n",
                      "  input: [{'text': 'I want to order some coffee'}]\n",
                      "};\n",
                      "\n",
                      "assistant.bulkClassify(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response=assistant.bulk_classify(\n",
                      "    workspace_id='{workspace_id}',\n",
                      "    input=[{'text': 'I want to order some coffee'}]\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/user_data": {
      "parameters": [
        {
          "$ref": "#/components/parameters/VersionQueryParam"
        }
      ],
      "delete": {
        "operationId": "deleteUserData",
        "summary": "Delete labeled data",
        "description": "Deletes all data associated with a specified customer ID. The method has no effect if no data is associated with the customer ID. \n\nYou associate a customer ID with data by passing the `X-Watson-Metadata` header with a request that passes data. For more information about personal data and customer IDs, see [Information security](https://cloud.ibm.com/docs/assistant?topic=assistant-information-security#information-security).\n\n**Note:** This operation is intended only for deleting data associated with a single specific customer, not for deleting data associated with multiple customers or for any other purpose. For more information, see [Labeling and deleting data in Watson Assistant](https://cloud.ibm.com/docs/assistant?topic=assistant-information-security#information-security-gdpr-wa).",
        "x-rate-limit": "This operation is limited to 4 requests per minute.",
        "tags": [
          "User data"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "customer_id",
            "required": true,
            "description": "The customer ID for which all data is to be deleted.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "The request to delete data was successfully submitted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyResponse"
                }
              }
            }
          },
          "400": {
            "description": "**Bad Request**. The request did not pass a customer ID:\n* `No customer ID found in the request`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {
          "request-examples": {
            "curl": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "curl -X DELETE -u \"apikey:{apikey}\" \\\n",
                      "\"{url}/v1/user_data?customer_id={id}&version=2021-06-14\""
                    ]
                  }
                ]
              }
            ],
            "dotnet-standard": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\n",
                      "    apikey: \"{apikey}\"\n",
                      "    );\n",
                      "\n",
                      "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                      "assistant.SetServiceUrl(\"{url}\");\n",
                      "\n",
                      "var result = assistant.DeleteUserData(\n",
                      "    customerId: \"{id}\"\n",
                      "    );\n",
                      "\n",
                      "Console.WriteLine(result.Response);"
                    ]
                  }
                ]
              }
            ],
            "java": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                      "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                      "assistant.setServiceUrl(\"{url}\");\n",
                      "\n",
                      "String customerId = \"{id}\";\n",
                      "\n",
                      "DeleteUserDataOptions options = new DeleteUserDataOptions.Builder(customerId).build();\n",
                      "\n",
                      "assistant.deleteUserData(options).execute();    "
                    ]
                  }
                ]
              }
            ],
            "node": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "const AssistantV1 = require('ibm-watson/assistant/v1');\n",
                      "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                      "\n",
                      "const assistant = new AssistantV1({\n",
                      "  version: '2021-06-14',\n",
                      "  authenticator: new IamAuthenticator({\n",
                      "    apikey: '{apikey}',\n",
                      "  }),\n",
                      "  serviceUrl: '{url}',\n",
                      "});\n",
                      "\n",
                      "const params = {\n",
                      "  customerId: '{id}'\n",
                      "};\n",
                      "\n",
                      "assistant.deleteUserData(params)\n",
                      "  .then(res => {\n",
                      "    console.log(JSON.stringify(res.result, null, 2));\n",
                      "  })\n",
                      "  .catch(err => {\n",
                      "    console.log(err)\n",
                      "  });"
                    ]
                  }
                ]
              }
            ],
            "python": [
              {
                "name": "Example request for IBM Cloud",
                "example": [
                  {
                    "type": "code",
                    "source": [
                      "import json\n",
                      "from ibm_watson import AssistantV1\n",
                      "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                      "\n",
                      "authenticator = IAMAuthenticator('{apikey}')\n",
                      "assistant = AssistantV1(\n",
                      "    version='2021-06-14',\n",
                      "    authenticator = authenticator\n",
                      ")\n",
                      "\n",
                      "assistant.set_service_url('{url}')\n",
                      "\n",
                      "response = assistant.delete_user_data(\n",
                      "    customer_id = '{id}'\n",
                      ").get_result()\n",
                      "\n",
                      "print(json.dumps(response, indent=2))"
                    ]
                  }
                ]
              }
            ]
          }
        }
      }
    },
    "/v1/workspaces_async": {
      "parameters": [
        {
          "$ref": "#/components/parameters/VersionQueryParam"
        }
      ],
      "post": {
        "operationId": "createWorkspaceAsync",
        "summary": "Create workspace asynchronously",
        "description": "Create a workspace asynchronously based on component objects. You must provide workspace components defining the content of the new workspace.\n\nA successful call to this method only initiates asynchronous creation of the workspace. The new workspace is not available until processing completes. To check the status of the asynchronous operation, use the **Get information about a workspace** method.",
        "x-rate-limit": "This operation is limited to 30 requests per 30 minutes.",
        "tags": [
          "Workspaces"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWorkspace"
              }
            }
          }
        },
        "x-codegen-request-body-name": "body",
        "responses": {
          "202": {
            "description": "Successful request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workspace"
                },
                "examples": {
                  "response": {
                    "description": "Successful request. The workspace is being created asynchronously.",
                    "value": {
                      "status": "Processing",
                      "name": "API test",
                      "language": "en",
                      "description": "Example workspace created via API.",
                      "workspace_id": "245edf96-b89f-46ac-b647-c6618b2eb5f0",
                      "learning_opt_out": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {}
      }
    },
    "/v1/workspaces_async/{workspace_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspacePathParam"
        },
        {
          "$ref": "#/components/parameters/VersionQueryParam"
        }
      ],
      "post": {
        "operationId": "updateWorkspaceAsync",
        "summary": "Update workspace asynchronously",
        "description": "Update an existing workspace asynchronously with new or modified data. You must provide component objects defining the content of the updated workspace.\n\nA successful call to this method only initiates an asynchronous update of the workspace. The updated workspace is not available until processing completes. To check the status of the asynchronous operation, use the **Get information about a workspace** method.",
        "x-rate-limit": "This operation is limited to 30 request per 30 minutes.",
        "tags": [
          "Workspaces"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "append",
            "required": false,
            "description": "Whether the new data is to be appended to the existing data in the object. If **append**=`false`, elements included in the new data completely replace the corresponding existing elements, including all subelements. For example, if the new data for a workspace includes **entities** and **append**=`false`, all existing entities in the workspace are discarded and replaced with the new entities.\n\nIf **append**=`true`, existing elements are preserved, and the new elements are added. If any elements in the new data collide with existing elements, the update request fails.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWorkspace"
              }
            }
          },
          "description": "Valid data defining the new and updated workspace content.\n\nThe maximum size for this data is 50MB. If you need to import a larger amount of workspace data, consider importing components such as intents and entities using separate operations."
        },
        "x-codegen-request-body-name": "body",
        "responses": {
          "202": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workspace"
                },
                "examples": {
                  "response": {
                    "description": "Successful request. The workspace is being updated asynchronously.",
                    "value": {
                      "status": "Processing",
                      "name": "Updated workspace",
                      "language": "en",
                      "description": "Example workspace modified via API",
                      "workspace_id": "164cca2d-8af7-4034-a121-89049a665183",
                      "learning_opt_out": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {}
      }
    },
    "/v1/workspaces_async/{workspace_id}/export": {
      "parameters": [
        {
          "$ref": "#/components/parameters/WorkspacePathParam"
        },
        {
          "$ref": "#/components/parameters/VersionQueryParam"
        }
      ],
      "get": {
        "operationId": "exportWorkspaceAsync",
        "summary": "Export workspace asynchronously",
        "description": "Export the entire workspace asynchronously, including all workspace content.\n\nA successful call to this method only initiates an asynchronous export. The exported JSON data is not available until processing completes. After the initial request is submitted, you can continue to poll by calling the same request again and checking the value of the **status** property. When processing has completed, the request returns the exported JSON data. Remember that the usual rate limits apply.",
        "x-rate-limit": "The limit is 20 requests per 30 minutes.",
        "tags": [
          "Workspaces"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/IncludeAuditQueryParam"
          },
          {
            "in": "query",
            "name": "sort",
            "required": false,
            "description": "Indicates how the returned workspace data will be sorted. Specify `sort=stable` to sort all workspace objects by unique identifier, in ascending alphabetical order.",
            "schema": {
              "type": "string",
              "enum": [
                "stable"
              ]
            }
          },
          {
            "in": "query",
            "name": "verbose",
            "required": false,
            "description": "Whether the response should include the `counts` property, which indicates how many of each component (such as intents and entities) the workspace contains.",
            "schema": {
              "type": "boolean",
              "default": "false"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request. Note that this does not mean that the asynchronous export operation has completed or was successful. Check the value of the **status** property to determine the status of the operation.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workspace"
                },
                "examples": {
                  "export-success": {
                    "description": "Successful request. All asynchronous operations have completed, and the exported workspace data is included in the response.",
                    "value": {
                      "status": "Available",
                      "workspace_id": "164cca2d-8af7-4034-a121-89049a665183",
                      "name": "test workspace",
                      "description": "test workspace description",
                      "language": "en",
                      "learning_opt_out": true,
                      "counts": {
                        "node": 0,
                        "entity": 0,
                        "intent": 0
                      },
                      "created": "2022-05-02T19:22:14.040Z",
                      "updated": "2022-05-02T19:23:17.353Z",
                      "intents": [],
                      "entities": [],
                      "dialog_nodes": [],
                      "counterexamples": [],
                      "system_settings": {
                        "initial_context": {
                          "init": true
                        }
                      },
                      "metadata": {
                        "api_version": {
                          "major_version": "v1",
                          "minor_version": "2017-05-26"
                        }
                      }
                    }
                  },
                  "export-on-async-create-failure": {
                    "description": "Successful request. However, a previous asynchronous create operation has failed.",
                    "value": {
                      "status": "Failed",
                      "workspace_id": "164cca2d-8af7-4034-a121-89049a665183",
                      "status_errors": [
                        {
                          "message": "Invalid tree detected. Dialog node 'node_15_1490282289321' is poorly defined. Check its parent or previous_sibling value."
                        }
                      ],
                      "status_description": "Workspace import failed",
                      "name": "Created workspace",
                      "language": "en",
                      "learning_opt_out": false
                    }
                  },
                  "export-on-async-update-failure": {
                    "description": "Successful request. However, a previous asynchronous update request has failed.",
                    "value": {
                      "status": "Failed",
                      "workspace_id": "164cca2d-8af7-4034-a121-89049a665183",
                      "status_errors": [
                        {
                          "message": "Invalid tree detected. Dialog node 'node_15_1490282289321' is poorly defined. Check its parent or previous_sibling value."
                        }
                      ],
                      "status_description": "Workspace update failed",
                      "name": "Updated workspace",
                      "language": "en",
                      "learning_opt_out": false
                    }
                  }
                }
              }
            }
          },
          "202": {
            "description": "Request to export workspace has been accepted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workspace"
                },
                "examples": {
                  "response": {
                    "description": "Successful request.",
                    "value": {
                      "status": "Processing",
                      "name": "Test workspace",
                      "language": "en",
                      "description": "Example workspace modified via API",
                      "workspace_id": "164cca2d-8af7-4034-a121-89049a665183",
                      "learning_opt_out": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "x-sdk-operations": {}
      }
    }
  },
  "servers": [
    {
      "url": "https://api.us-south.assistant.watson.cloud.ibm.com",
      "description": "Dallas"
    }
  ],
  "components": {
    "parameters": {
      "CursorQueryParam": {
        "in": "query",
        "name": "cursor",
        "required": false,
        "description": "A token identifying the page of results to retrieve.",
        "schema": {
          "type": "string"
        }
      },
      "DialogNodePathParam": {
        "in": "path",
        "name": "dialog_node",
        "required": true,
        "description": "The dialog node ID (for example, `node_1_1479323581900`).",
        "schema": {
          "type": "string"
        }
      },
      "EntityPathParam": {
        "in": "path",
        "name": "entity",
        "required": true,
        "description": "The name of the entity.",
        "schema": {
          "type": "string"
        }
      },
      "ExportQueryParam": {
        "in": "query",
        "name": "export",
        "required": false,
        "description": "Whether to include all element content in the returned data. If **export**=`false`, the returned data includes only information about the element itself. If **export**=`true`, all content, including subelements, is included.",
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "IncludeAuditQueryParam": {
        "in": "query",
        "name": "include_audit",
        "required": false,
        "description": "Whether to include the audit properties (`created` and `updated` timestamps) in the response.",
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "IncludeCountQueryParam": {
        "in": "query",
        "name": "include_count",
        "required": false,
        "description": "Whether to include information about the number of records that satisfy the request, regardless of the page limit. If this parameter is `true`, the `pagination` object in the response includes the `total` property.",
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "IntentPathParam": {
        "in": "path",
        "name": "intent",
        "required": true,
        "description": "The intent name.",
        "schema": {
          "type": "string"
        }
      },
      "LogSortQueryParam": {
        "in": "query",
        "name": "sort",
        "required": false,
        "description": "How to sort the returned log events. You can sort by **request_timestamp**. To reverse the sort order, prefix the parameter value with a minus sign (`-`).",
        "schema": {
          "type": "string"
        }
      },
      "PageLimitQueryParam": {
        "in": "query",
        "name": "page_limit",
        "required": false,
        "description": "The number of records to return in each page of results.",
        "schema": {
          "type": "integer",
          "default": 100
        }
      },
      "ValuePathParam": {
        "in": "path",
        "name": "value",
        "required": true,
        "description": "The text of the entity value.",
        "schema": {
          "type": "string"
        }
      },
      "VersionQueryParam": {
        "in": "query",
        "name": "version",
        "required": true,
        "description": "Release date of the API version you want to use. Specify dates in YYYY-MM-DD format. The current version is `2021-11-27`.",
        "schema": {
          "type": "string"
        },
        "x-sdk-global-param": true
      },
      "WorkspacePathParam": {
        "in": "path",
        "name": "workspace_id",
        "required": true,
        "description": "Unique identifier of the workspace.",
        "schema": {
          "type": "string"
        }
      }
    },
    "securitySchemes": {
      "IAM": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    },
    "schemas": {
      "AgentAvailabilityMessage": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "The text of the message.",
            "minLength": 1,
            "maxLength": 512
          }
        }
      },
      "AuditProperties": {
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The timestamp for creation of the object."
          },
          "updated": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "The timestamp for the most recent update to the object."
          }
        }
      },
      "BaseCounterexample": {
        "allOf": [
          {
            "properties": {
              "text": {
                "type": "string",
                "minLength": 1,
                "maxLength": 1024,
                "description": "The text of a user input marked as irrelevant input. This string must conform to the following restrictions:\n- It cannot contain carriage return, newline, or tab characters.\n- It cannot consist of only whitespace characters."
              }
            }
          },
          {
            "$ref": "#/components/schemas/AuditProperties"
          }
        ]
      },
      "BaseDialogNode": {
        "allOf": [
          {
            "properties": {
              "dialog_node": {
                "type": "string",
                "minLength": 1,
                "maxLength": 1024,
                "description": "The unique ID of the dialog node. This is an internal identifier used to refer to the dialog node from other dialog nodes and in the diagnostic information included with message responses.\n\nThis string can contain only Unicode alphanumeric, space, underscore, hyphen, and dot characters."
              },
              "description": {
                "type": "string",
                "minLength": 1,
                "maxLength": 128,
                "description": "The description of the dialog node. This string cannot contain carriage return, newline, or tab characters."
              },
              "conditions": {
                "type": "string",
                "minLength": 1,
                "maxLength": 2048,
                "description": "The condition that will trigger the dialog node. This string cannot contain carriage return, newline, or tab characters."
              },
              "parent": {
                "type": "string",
                "description": "The unique ID of the parent dialog node. This property is omitted if the dialog node has no parent."
              },
              "previous_sibling": {
                "type": "string",
                "description": "The unique ID of the previous sibling dialog node. This property is omitted if the dialog node has no previous sibling."
              },
              "output": {
                "$ref": "#/components/schemas/DialogNodeOutput"
              },
              "context": {
                "$ref": "#/components/schemas/DialogNodeContext"
              },
              "metadata": {
                "type": "object",
                "description": "The metadata for the dialog node.",
                "additionalProperties": {
                  "description": "Any metadata value."
                }
              },
              "next_step": {
                "$ref": "#/components/schemas/DialogNodeNextStep"
              },
              "title": {
                "type": "string",
                "minLength": 1,
                "maxLength": 512,
                "description": "A human-readable name for the dialog node. If the node is included in disambiguation, this title is used to populate the **label** property of the corresponding suggestion in the `suggestion` response type (unless it is overridden by the **user_label** property). The title is also used to populate the **topic** property in the `connect_to_agent` response type.\n\nThis string can contain only Unicode alphanumeric, space, underscore, hyphen, and dot characters."
              },
              "type": {
                "type": "string",
                "enum": [
                  "standard",
                  "event_handler",
                  "frame",
                  "slot",
                  "response_condition",
                  "folder"
                ],
                "description": "How the dialog node is processed."
              },
              "event_name": {
                "type": "string",
                "enum": [
                  "focus",
                  "input",
                  "filled",
                  "validate",
                  "filled_multiple",
                  "generic",
                  "nomatch",
                  "nomatch_responses_depleted",
                  "digression_return_prompt"
                ],
                "description": "How an `event_handler` node is processed."
              },
              "variable": {
                "type": "string",
                "description": "The location in the dialog context where output is stored."
              },
              "actions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DialogNodeAction"
                },
                "maxItems": 5,
                "description": "An array of objects describing any actions to be invoked by the dialog node."
              },
              "digress_in": {
                "type": "string",
                "enum": [
                  "not_available",
                  "returns",
                  "does_not_return"
                ],
                "description": "Whether this top-level dialog node can be digressed into."
              },
              "digress_out": {
                "type": "string",
                "enum": [
                  "allow_returning",
                  "allow_all",
                  "allow_all_never_return"
                ],
                "description": "Whether this dialog node can be returned to after a digression."
              },
              "digress_out_slots": {
                "type": "string",
                "enum": [
                  "not_allowed",
                  "allow_returning",
                  "allow_all"
                ],
                "description": "Whether the user can digress to top-level nodes while filling out slots."
              },
              "user_label": {
                "type": "string",
                "minLength": 1,
                "maxLength": 512,
                "description": "A label that can be displayed externally to describe the purpose of the node to users. If set, this label is used to identify the node in disambiguation responses (overriding the value of the **title** property)."
              },
              "disambiguation_opt_out": {
                "type": "boolean",
                "description": "Whether the dialog node should be excluded from disambiguation suggestions. Valid only when **type**=`standard` or `frame`.",
                "default": false
              },
              "disabled": {
                "type": "boolean",
                "description": "For internal use only.",
                "readOnly": true
              }
            }
          },
          {
            "$ref": "#/components/schemas/AuditProperties"
          }
        ]
      },
      "BaseEntity": {
        "allOf": [
          {
            "properties": {
              "entity": {
                "type": "string",
                "minLength": 1,
                "maxLength": 64,
                "description": "The name of the entity. This string must conform to the following restrictions:\n- It can contain only Unicode alphanumeric, underscore, and hyphen characters.\n- It cannot begin with the reserved prefix `sys-`."
              },
              "description": {
                "type": "string",
                "minLength": 1,
                "maxLength": 128,
                "description": "The description of the entity. This string cannot contain carriage return, newline, or tab characters."
              },
              "metadata": {
                "type": "object",
                "description": "Any metadata related to the entity.",
                "additionalProperties": {
                  "description": "Any metadata value."
                }
              },
              "fuzzy_match": {
                "type": "boolean",
                "description": "Whether to use fuzzy matching for the entity."
              }
            }
          },
          {
            "$ref": "#/components/schemas/AuditProperties"
          }
        ]
      },
      "BaseExample": {
        "allOf": [
          {
            "properties": {
              "text": {
                "type": "string",
                "minLength": 1,
                "maxLength": 1024,
                "description": "The text of the user input example. This string must conform to the following restrictions:\n- It cannot contain carriage return, newline, or tab characters.\n- It cannot consist of only whitespace characters."
              },
              "mentions": {
                "description": "An array of contextual entity mentions.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Mention"
                }
              }
            }
          },
          {
            "$ref": "#/components/schemas/AuditProperties"
          }
        ]
      },
      "BaseIntent": {
        "allOf": [
          {
            "properties": {
              "intent": {
                "type": "string",
                "minLength": 1,
                "maxLength": 128,
                "description": "The name of the intent. This string must conform to the following restrictions:\n- It can contain only Unicode alphanumeric, underscore, hyphen, and dot characters.\n- It cannot begin with the reserved prefix `sys-`."
              },
              "description": {
                "type": "string",
                "minLength": 1,
                "maxLength": 128,
                "description": "The description of the intent. This string cannot contain carriage return, newline, or tab characters."
              }
            }
          },
          {
            "$ref": "#/components/schemas/AuditProperties"
          }
        ]
      },
      "BaseMessage": {
        "properties": {
          "input": {
            "$ref": "#/components/schemas/MessageInput"
          },
          "intents": {
            "description": "An array of intents recognized in the user input, sorted in descending order of confidence",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuntimeIntent"
            }
          },
          "entities": {
            "description": "An array of entities identified in the user input.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuntimeEntity"
            }
          },
          "alternate_intents": {
            "type": "boolean",
            "description": "Whether to return more than one intent. A value of `true` indicates that all matching intents are returned.",
            "default": false
          },
          "context": {
            "$ref": "#/components/schemas/Context"
          },
          "output": {
            "$ref": "#/components/schemas/OutputData"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DialogNodeAction"
            },
            "description": "An array of objects describing any actions requested by the dialog node.",
            "readOnly": true
          },
          "user_id": {
            "type": "string",
            "minLength": 1,
            "maxLength": 256,
            "description": "A string value that identifies the user who is interacting with the workspace. The client must provide a unique identifier for each individual end user who accesses the application. For user-based plans, this user ID is used to identify unique users for billing purposes. This string cannot contain carriage return, newline, or tab characters. If no value is specified in the input, **user_id** is automatically set to the value of **context.conversation_id**.\n\n**Note:** This property is the same as the **user_id** property in the context metadata. If **user_id** is specified in both locations in a message request, the value specified at the root is used."
          }
        }
      },
      "BaseOutput": {
        "type": "object",
        "description": "An output object that includes the response to the user, the dialog nodes that were triggered, and messages from the log.",
        "properties": {
          "nodes_visited": {
            "type": "array",
            "description": "An array of the nodes that were triggered to create the response, in the order in which they were visited. This information is useful for debugging and for tracing the path taken through the node tree.",
            "items": {
              "type": "string"
            }
          },
          "nodes_visited_details": {
            "type": "array",
            "description": "An array of objects containing detailed diagnostic information about the nodes that were triggered during processing of the input message. Included only if **nodes_visited_details** is set to `true` in the message request.",
            "items": {
              "$ref": "#/components/schemas/DialogNodeVisitedDetails"
            }
          }
        },
        "additionalProperties": {
          "description": "Any additional data included with the output."
        }
      },
      "BaseSynonym": {
        "allOf": [
          {
            "properties": {
              "synonym": {
                "type": "string",
                "minLength": 1,
                "maxLength": 64,
                "description": "The text of the synonym. This string must conform to the following restrictions:\n- It cannot contain carriage return, newline, or tab characters.\n- It cannot consist of only whitespace characters."
              }
            }
          },
          {
            "$ref": "#/components/schemas/AuditProperties"
          }
        ]
      },
      "BaseValue": {
        "allOf": [
          {
            "properties": {
              "value": {
                "type": "string",
                "minLength": 1,
                "maxLength": 64,
                "description": "The text of the entity value. This string must conform to the following restrictions:\n- It cannot contain carriage return, newline, or tab characters.\n- It cannot consist of only whitespace characters."
              },
              "metadata": {
                "type": "object",
                "description": "Any metadata related to the entity value.",
                "additionalProperties": {
                  "description": "Any metadata value."
                }
              },
              "type": {
                "type": "string",
                "enum": [
                  "synonyms",
                  "patterns"
                ],
                "default": "synonyms",
                "description": "Specifies the type of entity value."
              },
              "synonyms": {
                "type": "array",
                "items": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 64
                },
                "description": "An array of synonyms for the entity value. A value can specify either synonyms or patterns (depending on the value type), but not both. A synonym must conform to the following resrictions:\n- It cannot contain carriage return, newline, or tab characters.\n- It cannot consist of only whitespace characters.",
                "x-item-name": "synonym"
              },
              "patterns": {
                "type": "array",
                "items": {
                  "type": "string",
                  "minLength": 1,
                  "maxLength": 512
                },
                "maxItems": 5,
                "description": "An array of patterns for the entity value. A value can specify either synonyms or patterns (depending on the value type), but not both. A pattern is a regular expression; for more information about how to specify a pattern, see the [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-entities#entities-create-dictionary-based).",
                "x-item-name": "pattern"
              }
            }
          },
          {
            "$ref": "#/components/schemas/AuditProperties"
          }
        ]
      },
      "BaseWorkspace": {
        "allOf": [
          {
            "properties": {
              "name": {
                "type": "string",
                "minLength": 1,
                "maxLength": 64,
                "description": "The name of the workspace. This string cannot contain carriage return, newline, or tab characters."
              },
              "description": {
                "type": "string",
                "minLength": 1,
                "maxLength": 128,
                "description": "The description of the workspace. This string cannot contain carriage return, newline, or tab characters."
              },
              "language": {
                "type": "string",
                "description": "The language of the workspace."
              },
              "workspace_id": {
                "type": "string",
                "readOnly": true,
                "description": "The workspace ID of the workspace."
              },
              "dialog_nodes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DialogNode"
                },
                "description": "An array of objects describing the dialog nodes in the workspace.",
                "x-item-name": "dialog_node"
              },
              "counterexamples": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Counterexample"
                },
                "description": "An array of objects defining input examples that have been marked as irrelevant input.",
                "x-item-name": "counterexample"
              }
            }
          },
          {
            "$ref": "#/components/schemas/AuditProperties"
          }
        ]
      },
      "BulkClassifyInput": {
        "type": "object",
        "properties": {
          "input": {
            "type": "array",
            "description": "An array of input utterances to classify.",
            "items": {
              "$ref": "#/components/schemas/BulkClassifyUtterance"
            },
            "minItems": 1,
            "maxItems": 50
          }
        },
        "required": [
          "input"
        ]
      },
      "BulkClassifyOutput": {
        "type": "object",
        "properties": {
          "input": {
            "$ref": "#/components/schemas/BulkClassifyUtterance"
          },
          "entities": {
            "description": "An array of entities identified in the utterance.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuntimeEntity"
            }
          },
          "intents": {
            "description": "An array of intents recognized in the utterance.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuntimeIntent"
            }
          }
        }
      },
      "BulkClassifyResponse": {
        "type": "object",
        "properties": {
          "output": {
            "type": "array",
            "description": "An array of objects that contain classification information for the submitted input utterances.",
            "items": {
              "$ref": "#/components/schemas/BulkClassifyOutput"
            }
          }
        }
      },
      "BulkClassifyUtterance": {
        "type": "object",
        "description": "The user input utterance to classify.",
        "properties": {
          "text": {
            "type": "string",
            "description": "The text of the input utterance.",
            "minLength": 1,
            "maxLength": 2048
          }
        },
        "required": [
          "text"
        ]
      },
      "CaptureGroup": {
        "type": "object",
        "description": "A recognized capture group for a pattern-based entity.",
        "properties": {
          "group": {
            "type": "string",
            "description": "A recognized capture group for the entity."
          },
          "location": {
            "type": "array",
            "description": "Zero-based character offsets that indicate where the entity value begins and ends in the input text.",
            "items": {
              "type": "integer"
            },
            "maxItems": 2,
            "minItems": 2
          }
        },
        "required": [
          "group"
        ]
      },
      "ChannelTransferInfo": {
        "type": "object",
        "description": "Information used by an integration to transfer the conversation to a different channel.",
        "properties": {
          "target": {
            "$ref": "#/components/schemas/ChannelTransferTarget"
          }
        },
        "required": [
          "target"
        ]
      },
      "ChannelTransferTarget": {
        "type": "object",
        "description": "An object specifying target channels available for the transfer. Each property of this object represents an available transfer target. Currently, the only supported property is **chat**, representing the web chat integration.",
        "properties": {
          "chat": {
            "$ref": "#/components/schemas/ChannelTransferTargetChat"
          }
        }
      },
      "ChannelTransferTargetChat": {
        "type": "object",
        "description": "Information for transferring to the web chat integration.",
        "properties": {
          "url": {
            "type": "string",
            "description": "The URL of the target web chat."
          }
        }
      },
      "Context": {
        "type": "object",
        "description": "State information for the conversation. To maintain state, include the context from the previous response.",
        "properties": {
          "conversation_id": {
            "description": "The unique identifier of the conversation. The conversation ID cannot contain any of the following characters: `+` `=` `&&` `||` `>` `<` `!` `(` `)` `{` `}` `[` `]` `^` `\"` `~` `*` `?` `:` `\\` `/`",
            "type": "string"
          },
          "system": {
            "$ref": "#/components/schemas/SystemResponse"
          },
          "metadata": {
            "$ref": "#/components/schemas/MessageContextMetadata"
          }
        },
        "additionalProperties": {
          "description": "Any context variable."
        }
      },
      "Counterexample": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCounterexample"
          },
          {
            "properties": {
              "text": {
                "type": "string",
                "minLength": 1,
                "maxLength": 1024,
                "description": "The text of a user input marked as irrelevant input. This string must conform to the following restrictions:\n- It cannot contain carriage return, newline, or tab characters.\n- It cannot consist of only whitespace characters."
              }
            },
            "required": [
              "text"
            ]
          }
        ],
        "x-java-builder": true
      },
      "CounterexampleCollection": {
        "properties": {
          "counterexamples": {
            "description": "An array of objects describing the examples marked as irrelevant input.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Counterexample"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "required": [
          "counterexamples",
          "pagination"
        ]
      },
      "CreateEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseEntity"
          },
          {
            "properties": {
              "entity": {
                "type": "string",
                "minLength": 1,
                "maxLength": 64,
                "description": "The name of the entity. This string must conform to the following restrictions:\n- It can contain only Unicode alphanumeric, underscore, and hyphen characters.\n- If you specify an entity name beginning with the reserved prefix `sys-`, it must be the name of a system entity that you want to enable. (Any entity content specified with the request is ignored.)"
              },
              "values": {
                "type": "array",
                "description": "An array of objects describing the entity values.",
                "items": {
                  "$ref": "#/components/schemas/CreateValue"
                }
              }
            },
            "required": [
              "entity"
            ]
          }
        ],
        "x-java-builder": true
      },
      "CreateIntent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseIntent"
          },
          {
            "properties": {
              "intent": {
                "type": "string",
                "minLength": 1,
                "maxLength": 128,
                "description": "The name of the intent. This string must conform to the following restrictions:\n- It can contain only Unicode alphanumeric, underscore, hyphen, and dot characters.\n- It cannot begin with the reserved prefix `sys-`."
              },
              "examples": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Example"
                },
                "description": "An array of user input examples for the intent.",
                "x-item-name": "example"
              }
            },
            "required": [
              "intent"
            ]
          }
        ],
        "x-java-builder": true
      },
      "CreateValue": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseValue"
          },
          {
            "properties": {
              "value": {
                "type": "string",
                "minLength": 1,
                "maxLength": 64,
                "description": "The text of the entity value. This string must conform to the following restrictions:\n- It cannot contain carriage return, newline, or tab characters.\n- It cannot consist of only whitespace characters."
              }
            },
            "required": [
              "value"
            ]
          }
        ],
        "x-java-builder": true
      },
      "CreateWorkspace": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseWorkspace"
          },
          {
            "$ref": "#/components/schemas/WorkspaceReference"
          },
          {
            "properties": {
              "intents": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateIntent"
                },
                "description": "An array of objects defining the intents for the workspace.",
                "x-item-name": "intent"
              },
              "entities": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateEntity"
                },
                "description": "An array of objects describing the entities for the workspace.",
                "x-item-name": "entity"
              }
            }
          }
        ],
        "x-java-builder": true
      },
      "DialogNode": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseDialogNode"
          },
          {
            "required": [
              "dialog_node"
            ]
          }
        ],
        "x-java-builder": true
      },
      "DialogNodeAction": {
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the action."
          },
          "type": {
            "type": "string",
            "enum": [
              "client",
              "server",
              "cloud_function",
              "web_action",
              "webhook"
            ],
            "default": "client",
            "description": "The type of action to invoke."
          },
          "parameters": {
            "type": "object",
            "description": "A map of key/value pairs to be provided to the action.",
            "additionalProperties": {
              "description": "A parameter provided to the action."
            }
          },
          "result_variable": {
            "type": "string",
            "description": "The location in the dialog context where the result of the action is stored."
          },
          "credentials": {
            "type": "string",
            "description": "The name of the context variable that the client application will use to pass in credentials for the action."
          }
        },
        "required": [
          "name",
          "result_variable"
        ]
      },
      "DialogNodeCollection": {
        "description": "An array of dialog nodes.",
        "properties": {
          "dialog_nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DialogNode"
            },
            "description": "An array of objects describing the dialog nodes defined for the workspace."
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "required": [
          "dialog_nodes",
          "pagination"
        ]
      },
      "DialogNodeContext": {
        "type": "object",
        "description": "The context for the dialog node.",
        "properties": {
          "integrations": {
            "type": "object",
            "description": "Context data intended for specific integrations.",
            "additionalProperties": {
              "type": "object",
              "description": "An object containing context data intended for an integration (such as the web chat).",
              "additionalProperties": {
                "description": "Any context data."
              }
            }
          }
        },
        "additionalProperties": {
          "description": "Any context variable."
        }
      },
      "DialogNodeNextStep": {
        "description": "The next step to execute following this dialog node.",
        "properties": {
          "behavior": {
            "type": "string",
            "enum": [
              "get_user_input",
              "skip_user_input",
              "jump_to",
              "reprompt",
              "skip_slot",
              "skip_all_slots"
            ],
            "description": "What happens after the dialog node completes. The valid values depend on the node type:\n- The following values are valid for any node:\n  - `get_user_input`\n  - `skip_user_input`\n  - `jump_to`\n- If the node is of type `event_handler` and its parent node is of type `slot` or `frame`, additional values are also valid:\n  - if **event_name**=`filled` and the type of the parent node is `slot`:\n    - `reprompt`\n    - `skip_all_slots`\n- if **event_name**=`nomatch` and the type of the parent node is `slot`:\n    - `reprompt`\n    - `skip_slot`\n    - `skip_all_slots`\n- if **event_name**=`generic` and the type of the parent node is `frame`:\n    - `reprompt`\n    - `skip_slot`\n    - `skip_all_slots`\n    \nIf you specify `jump_to`, then you must also specify a value for the `dialog_node` property."
          },
          "dialog_node": {
            "type": "string",
            "description": "The unique ID of the dialog node to process next. This parameter is required if **behavior**=`jump_to`."
          },
          "selector": {
            "type": "string",
            "enum": [
              "condition",
              "client",
              "user_input",
              "body"
            ],
            "description": "Which part of the dialog node to process next."
          }
        },
        "required": [
          "behavior"
        ]
      },
      "DialogNodeOutput": {
        "description": "The output of the dialog node. For more information about how to specify dialog node output, see the [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-dialog-overview#dialog-overview-responses).",
        "properties": {
          "generic": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DialogNodeOutputGeneric"
            },
            "description": "An array of objects describing the output defined for the dialog node."
          },
          "integrations": {
            "type": "object",
            "description": "Output intended for specific integrations. For more information, see the [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-dialog-responses-json).",
            "additionalProperties": {
              "type": "object",
              "description": "An object containing output intended for an integration (such as the web chat).",
              "additionalProperties": {
                "description": "Any output property understood by the target integration."
              }
            }
          },
          "modifiers": {
            "$ref": "#/components/schemas/DialogNodeOutputModifiers"
          }
        },
        "additionalProperties": {
          "description": "Any additional data included in the dialog node output."
        }
      },
      "DialogNodeOutputGeneric": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/DialogNodeOutputResponseTypeText"
          },
          {
            "$ref": "#/components/schemas/DialogNodeOutputResponseTypePause"
          },
          {
            "$ref": "#/components/schemas/DialogNodeOutputResponseTypeImage"
          },
          {
            "$ref": "#/components/schemas/DialogNodeOutputResponseTypeOption"
          },
          {
            "$ref": "#/components/schemas/DialogNodeOutputResponseTypeConnectToAgent"
          },
          {
            "$ref": "#/components/schemas/DialogNodeOutputResponseTypeSearchSkill"
          },
          {
            "$ref": "#/components/schemas/DialogNodeOutputResponseTypeChannelTransfer"
          },
          {
            "$ref": "#/components/schemas/DialogNodeOutputResponseTypeUserDefined"
          },
          {
            "$ref": "#/components/schemas/DialogNodeOutputResponseTypeVideo"
          },
          {
            "$ref": "#/components/schemas/DialogNodeOutputResponseTypeAudio"
          },
          {
            "$ref": "#/components/schemas/DialogNodeOutputResponseTypeIframe"
          }
        ],
        "discriminator": {
          "propertyName": "response_type",
          "mapping": {
            "audio": "#/components/schemas/DialogNodeOutputResponseTypeAudio",
            "channel_transfer": "#/components/schemas/DialogNodeOutputResponseTypeChannelTransfer",
            "connect_to_agent": "#/components/schemas/DialogNodeOutputResponseTypeConnectToAgent",
            "iframe": "#/components/schemas/DialogNodeOutputResponseTypeIframe",
            "image": "#/components/schemas/DialogNodeOutputResponseTypeImage",
            "option": "#/components/schemas/DialogNodeOutputResponseTypeOption",
            "pause": "#/components/schemas/DialogNodeOutputResponseTypePause",
            "search_skill": "#/components/schemas/DialogNodeOutputResponseTypeSearchSkill",
            "text": "#/components/schemas/DialogNodeOutputResponseTypeText",
            "user_defined": "#/components/schemas/DialogNodeOutputResponseTypeUserDefined",
            "video": "#/components/schemas/DialogNodeOutputResponseTypeVideo"
          }
        }
      },
      "DialogNodeOutputModifiers": {
        "type": "object",
        "description": "Options that modify how specified output is handled.",
        "properties": {
          "overwrite": {
            "type": "boolean",
            "description": "Whether values in the output will overwrite output values in an array specified by previously executed dialog nodes. If this option is set to `false`, new values will be appended to previously specified values.",
            "default": true
          }
        }
      },
      "DialogNodeOutputOptionsElement": {
        "properties": {
          "label": {
            "type": "string",
            "minLength": 1,
            "maxLength": 2048,
            "description": "The user-facing label for the option."
          },
          "value": {
            "$ref": "#/components/schemas/DialogNodeOutputOptionsElementValue"
          }
        },
        "required": [
          "label",
          "value"
        ]
      },
      "DialogNodeOutputOptionsElementValue": {
        "properties": {
          "input": {
            "$ref": "#/components/schemas/MessageInput"
          },
          "intents": {
            "description": "An array of intents to be used while processing the input.\n\n**Note:** This property is supported for backward compatibility with applications that use the v1 **Get response to user input** method.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuntimeIntent"
            }
          },
          "entities": {
            "description": "An array of entities to be used while processing the user input.\n\n**Note:** This property is supported for backward compatibility with applications that use the v1 **Get response to user input** method.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuntimeEntity"
            }
          }
        },
        "description": "An object defining the message input to be sent to the Watson Assistant service if the user selects the corresponding option."
      },
      "DialogNodeOutputResponseTypeAudio": {
        "properties": {
          "response_type": {
            "type": "string",
            "description": "The type of response returned by the dialog node. The specified response type must be supported by the client application or channel."
          },
          "source": {
            "type": "string",
            "description": "The `https:` URL of the audio clip."
          },
          "title": {
            "type": "string",
            "description": "An optional title to show before the response."
          },
          "description": {
            "type": "string",
            "description": "An optional description to show with the response."
          },
          "channels": {
            "description": "An array of objects specifying channels for which the response is intended. If **channels** is present, the response is intended for a built-in integration and should not be handled by an API client.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseGenericChannel"
            },
            "minItems": 1
          },
          "channel_options": {
            "type": "object",
            "description": "For internal use only."
          },
          "alt_text": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "Descriptive text that can be used for screen readers or other situations where the audio player cannot be seen."
          }
        },
        "required": [
          "response_type",
          "source"
        ]
      },
      "DialogNodeOutputResponseTypeChannelTransfer": {
        "properties": {
          "response_type": {
            "type": "string",
            "description": "The type of response returned by the dialog node. The specified response type must be supported by the client application or channel. \n\n **Note:** The `channel_transfer` response type is not supported on IBM Cloud Pak for Data."
          },
          "message_to_user": {
            "type": "string",
            "description": "The message to display to the user when initiating a channel transfer.",
            "minLength": 1,
            "maxLength": 256
          },
          "transfer_info": {
            "$ref": "#/components/schemas/ChannelTransferInfo"
          },
          "channels": {
            "description": "An array of objects specifying channels for which the response is intended.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseGenericChannel"
            },
            "minItems": 1
          }
        },
        "required": [
          "response_type",
          "message_to_user",
          "transfer_info"
        ]
      },
      "DialogNodeOutputResponseTypeConnectToAgent": {
        "properties": {
          "response_type": {
            "type": "string",
            "description": "The type of response returned by the dialog node. The specified response type must be supported by the client application or channel."
          },
          "message_to_human_agent": {
            "type": "string",
            "minLength": 1,
            "maxLength": 256,
            "description": "An optional message to be sent to the human agent who will be taking over the conversation."
          },
          "agent_available": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AgentAvailabilityMessage"
              },
              {
                "description": "An optional message to be displayed to the user to indicate that the conversation will be transferred to the next available agent."
              }
            ]
          },
          "agent_unavailable": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AgentAvailabilityMessage"
              },
              {
                "description": "An optional message to be displayed to the user to indicate that no online agent is available to take over the conversation."
              }
            ]
          },
          "transfer_info": {
            "$ref": "#/components/schemas/DialogNodeOutputConnectToAgentTransferInfo"
          },
          "channels": {
            "description": "An array of objects specifying channels for which the response is intended.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseGenericChannel"
            },
            "minItems": 1
          }
        },
        "required": [
          "response_type"
        ]
      },
      "DialogNodeOutputConnectToAgentTransferInfo": {
        "type": "object",
        "description": "Routing or other contextual information to be used by target service desk systems.",
        "properties": {
          "target": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "description": "An object containing routing or other contextual information specific to a target service desk system. Currently supported properties are `salesforce`, `zendesk`, and `service_desk`. \n\n **Note:** The Salesforce and Zendesk integrations are not supported on IBM Cloud Pak for Data.",
              "additionalProperties": {
                "description": "Any property intended for the target service desk system."
              }
            }
          }
        }
      },
      "DialogNodeOutputResponseTypeIframe": {
        "properties": {
          "response_type": {
            "type": "string",
            "description": "The type of response returned by the dialog node. The specified response type must be supported by the client application or channel."
          },
          "source": {
            "type": "string",
            "description": "The `https:` URL of the embeddable content."
          },
          "title": {
            "type": "string",
            "description": "An optional title to show before the response."
          },
          "description": {
            "type": "string",
            "description": "An optional description to show with the response."
          },
          "image_url": {
            "type": "string",
            "description": "The URL of an image that shows a preview of the embedded content."
          },
          "channels": {
            "description": "An array of objects specifying channels for which the response is intended. If **channels** is present, the response is intended for a built-in integration and should not be handled by an API client.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseGenericChannel"
            },
            "minItems": 1
          }
        },
        "required": [
          "response_type",
          "source"
        ]
      },
      "DialogNodeOutputResponseTypeImage": {
        "properties": {
          "response_type": {
            "type": "string",
            "description": "The type of response returned by the dialog node. The specified response type must be supported by the client application or channel."
          },
          "source": {
            "type": "string",
            "description": "The `https:` URL of the image."
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 512,
            "description": "An optional title to show before the response."
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 256,
            "description": "An optional description to show with the response."
          },
          "channels": {
            "description": "An array of objects specifying channels for which the response is intended.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseGenericChannel"
            },
            "minItems": 1
          },
          "alt_text": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "Descriptive text that can be used for screen readers or other situations where the image cannot be seen."
          }
        },
        "required": [
          "response_type",
          "source"
        ]
      },
      "DialogNodeOutputResponseTypeOption": {
        "properties": {
          "response_type": {
            "type": "string",
            "description": "The type of response returned by the dialog node. The specified response type must be supported by the client application or channel."
          },
          "title": {
            "type": "string",
            "minLength": 1,
            "maxLength": 512,
            "description": "An optional title to show before the response."
          },
          "description": {
            "type": "string",
            "minLength": 1,
            "maxLength": 256,
            "description": "An optional description to show with the response."
          },
          "preference": {
            "type": "string",
            "description": "The preferred type of control to display, if supported by the channel.",
            "enum": [
              "dropdown",
              "button"
            ]
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DialogNodeOutputOptionsElement"
            },
            "description": "An array of objects describing the options from which the user can choose. You can include up to 20 options."
          },
          "channels": {
            "description": "An array of objects specifying channels for which the response is intended.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseGenericChannel"
            },
            "minItems": 1
          }
        },
        "required": [
          "response_type",
          "options",
          "title"
        ]
      },
      "DialogNodeOutputResponseTypePause": {
        "properties": {
          "response_type": {
            "type": "string",
            "description": "The type of response returned by the dialog node. The specified response type must be supported by the client application or channel."
          },
          "time": {
            "type": "integer",
            "description": "How long to pause, in milliseconds. The valid values are from 0 to 10000."
          },
          "typing": {
            "type": "boolean",
            "description": "Whether to send a \"user is typing\" event during the pause. Ignored if the channel does not support this event."
          },
          "channels": {
            "description": "An array of objects specifying channels for which the response is intended.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseGenericChannel"
            },
            "minItems": 1
          }
        },
        "required": [
          "response_type",
          "time"
        ]
      },
      "DialogNodeOutputResponseTypeSearchSkill": {
        "properties": {
          "response_type": {
            "type": "string",
            "description": "The type of response returned by the dialog node. The specified response type must be supported by the client application or channel.\n\n**Note:** The **search_skill** response type is used only by the v2 runtime API."
          },
          "query": {
            "type": "string",
            "minLength": 1,
            "maxLength": 2048,
            "description": "The text of the search query. This can be either a natural-language query or a query that uses the Discovery query language syntax, depending on the value of the **query_type** property. For more information, see the [Discovery service documentation](https://cloud.ibm.com/docs/discovery?topic=discovery-query-operators#query-operators)."
          },
          "query_type": {
            "type": "string",
            "description": "The type of the search query.",
            "enum": [
              "natural_language",
              "discovery_query_language"
            ]
          },
          "filter": {
            "type": "string",
            "minLength": 1,
            "maxLength": 2048,
            "description": "An optional filter that narrows the set of documents to be searched. For more information, see the [Discovery service documentation]([Discovery service documentation](https://cloud.ibm.com/docs/discovery?topic=discovery-query-parameters#filter)."
          },
          "discovery_version": {
            "type": "string",
            "description": "The version of the Discovery service API to use for the query.",
            "default": "2018-12-03"
          },
          "channels": {
            "description": "An array of objects specifying channels for which the response is intended.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseGenericChannel"
            },
            "minItems": 1
          }
        },
        "required": [
          "query",
          "query_type",
          "response_type"
        ]
      },
      "DialogNodeOutputResponseTypeText": {
        "properties": {
          "response_type": {
            "type": "string",
            "description": "The type of response returned by the dialog node. The specified response type must be supported by the client application or channel."
          },
          "values": {
            "type": "array",
            "description": "A list of one or more objects defining text responses.",
            "items": {
              "$ref": "#/components/schemas/DialogNodeOutputTextValuesElement"
            }
          },
          "selection_policy": {
            "type": "string",
            "description": "How a response is selected from the list, if more than one response is specified.",
            "enum": [
              "sequential",
              "random",
              "multiline"
            ]
          },
          "delimiter": {
            "type": "string",
            "description": "The delimiter to use as a separator between responses when `selection_policy`=`multiline`.",
            "default": "\\n"
          },
          "channels": {
            "description": "An array of objects specifying channels for which the response is intended.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseGenericChannel"
            },
            "minItems": 1
          }
        },
        "required": [
          "response_type",
          "values"
        ]
      },
      "DialogNodeOutputResponseTypeUserDefined": {
        "properties": {
          "response_type": {
            "type": "string",
            "description": "The type of response returned by the dialog node. The specified response type must be supported by the client application or channel."
          },
          "user_defined": {
            "type": "object",
            "description": "An object containing any properties for the user-defined response type. The total size of this object cannot exceed 5000 bytes.",
            "additionalProperties": {
              "description": "Any property used by the user-defined response type."
            }
          },
          "channels": {
            "description": "An array of objects specifying channels for which the response is intended.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseGenericChannel"
            },
            "minItems": 1
          }
        },
        "required": [
          "response_type",
          "user_defined"
        ]
      },
      "DialogNodeOutputResponseTypeVideo": {
        "properties": {
          "response_type": {
            "type": "string",
            "description": "The type of response returned by the dialog node. The specified response type must be supported by the client application or channel."
          },
          "source": {
            "type": "string",
            "description": "The `https:` URL of the video."
          },
          "title": {
            "type": "string",
            "description": "An optional title to show before the response."
          },
          "description": {
            "type": "string",
            "description": "An optional description to show with the response."
          },
          "channels": {
            "description": "An array of objects specifying channels for which the response is intended. If **channels** is present, the response is intended for a built-in integration and should not be handled by an API client.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseGenericChannel"
            },
            "minItems": 1
          },
          "channel_options": {
            "type": "object",
            "description": "For internal use only."
          },
          "alt_text": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "Descriptive text that can be used for screen readers or other situations where the video cannot be seen."
          }
        },
        "required": [
          "response_type",
          "source"
        ]
      },
      "DialogNodeOutputTextValuesElement": {
        "properties": {
          "text": {
            "type": "string",
            "minLength": 1,
            "maxLength": 4096,
            "description": "The text of a response. This string can include newline characters (`\\n`), Markdown tagging, or other special characters, if supported by the channel."
          }
        }
      },
      "DialogNodeVisitedDetails": {
        "properties": {
          "dialog_node": {
            "type": "string",
            "description": "The unique ID of a dialog node that was triggered during processing of the input message."
          },
          "title": {
            "type": "string",
            "description": "The title of the dialog node."
          },
          "conditions": {
            "type": "string",
            "description": "The conditions that trigger the dialog node."
          }
        }
      },
      "DialogSuggestion": {
        "properties": {
          "label": {
            "type": "string",
            "description": "The user-facing label for the disambiguation option. This label is taken from the **title** or **user_label** property of the corresponding dialog node."
          },
          "value": {
            "$ref": "#/components/schemas/DialogSuggestionValue"
          },
          "output": {
            "type": "object",
            "description": "The dialog output that will be returned from the Watson Assistant service if the user selects the corresponding option.",
            "additionalProperties": true
          },
          "dialog_node": {
            "type": "string",
            "description": "The unique ID of the dialog node that the **label** property is taken from. The **label** property is populated using the value of the dialog node's **title** or **user_label** property."
          }
        },
        "required": [
          "label",
          "value"
        ]
      },
      "DialogSuggestionValue": {
        "properties": {
          "input": {
            "$ref": "#/components/schemas/MessageInput"
          },
          "intents": {
            "type": "array",
            "description": "An array of intents to be sent along with the user input.",
            "items": {
              "$ref": "#/components/schemas/RuntimeIntent"
            }
          },
          "entities": {
            "type": "array",
            "description": "An array of entities to be sent along with the user input.",
            "items": {
              "$ref": "#/components/schemas/RuntimeEntity"
            }
          }
        },
        "description": "An object defining the message input, intents, and entities to be sent to the Watson Assistant service if the user selects the corresponding disambiguation option. \n\n **Note:** These properties must be included in the request body of the next message sent to the assistant. Do not modify or remove any of the included properties."
      },
      "EmptyResponse": {
        "properties": {}
      },
      "Entity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseEntity"
          },
          {
            "properties": {
              "entity": {
                "type": "string",
                "minLength": 1,
                "maxLength": 64,
                "description": "The name of the entity. This string must conform to the following restrictions:\n- It can contain only Unicode alphanumeric, underscore, and hyphen characters.\n- If you specify an entity name beginning with the reserved prefix `sys-`, it must be the name of a system entity that you want to enable. (Any entity content specified with the request is ignored.)"
              },
              "values": {
                "type": "array",
                "description": "An array of objects describing the entity values.",
                "items": {
                  "$ref": "#/components/schemas/Value"
                }
              }
            },
            "required": [
              "entity"
            ]
          }
        ]
      },
      "EntityCollection": {
        "description": "An array of objects describing the entities for the workspace.",
        "properties": {
          "entities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Entity"
            },
            "description": "An array of objects describing the entities defined for the workspace."
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "required": [
          "entities",
          "pagination"
        ]
      },
      "EntityMention": {
        "type": "object",
        "description": "An object describing a contextual entity mention.",
        "required": [
          "text",
          "intent",
          "location"
        ],
        "properties": {
          "text": {
            "type": "string",
            "description": "The text of the user input example."
          },
          "intent": {
            "type": "string",
            "description": "The name of the intent."
          },
          "location": {
            "type": "array",
            "description": "An array of zero-based character offsets that indicate where the entity mentions begin and end in the input text.",
            "items": {
              "type": "integer"
            },
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "EntityMentionCollection": {
        "properties": {
          "examples": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EntityMention"
            },
            "description": "An array of objects describing the entity mentions defined for an entity."
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "required": [
          "examples",
          "pagination"
        ]
      },
      "ErrorDetail": {
        "properties": {
          "message": {
            "type": "string",
            "description": "Description of a specific constraint violation."
          },
          "path": {
            "type": "string",
            "description": "The location of the constraint violation."
          }
        },
        "required": [
          "message"
        ]
      },
      "ErrorResponse": {
        "properties": {
          "error": {
            "type": "string",
            "description": "General description of an error."
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorDetail"
            },
            "description": "Collection of specific constraint violations associated with the error."
          },
          "code": {
            "type": "integer",
            "description": "HTTP status code for the error response."
          }
        },
        "required": [
          "error",
          "code"
        ]
      },
      "Example": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseExample"
          },
          {
            "properties": {
              "text": {
                "type": "string",
                "minLength": 1,
                "maxLength": 1024,
                "description": "The text of a user input example. This string must conform to the following restrictions:\n- It cannot contain carriage return, newline, or tab characters.\n- It cannot consist of only whitespace characters."
              }
            },
            "required": [
              "text"
            ]
          }
        ],
        "x-java-builder": true
      },
      "ExampleCollection": {
        "properties": {
          "examples": {
            "type": "array",
            "description": "An array of objects describing the examples defined for the intent.",
            "items": {
              "$ref": "#/components/schemas/Example"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "required": [
          "examples",
          "pagination"
        ]
      },
      "Intent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseIntent"
          },
          {
            "properties": {
              "intent": {
                "type": "string",
                "minLength": 1,
                "maxLength": 128,
                "description": "The name of the intent. This string must conform to the following restrictions:\n- It can contain only Unicode alphanumeric, underscore, hyphen, and dot characters.\n- It cannot begin with the reserved prefix `sys-`."
              },
              "examples": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Example"
                },
                "description": "An array of user input examples for the intent.",
                "x-item-name": "example"
              }
            },
            "required": [
              "intent"
            ]
          }
        ]
      },
      "IntentCollection": {
        "properties": {
          "intents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Intent"
            },
            "description": "An array of objects describing the intents defined for the workspace."
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "required": [
          "intents",
          "pagination"
        ]
      },
      "Log": {
        "properties": {
          "request": {
            "$ref": "#/components/schemas/MessageRequest"
          },
          "response": {
            "$ref": "#/components/schemas/MessageResponse"
          },
          "log_id": {
            "type": "string",
            "description": "A unique identifier for the logged event."
          },
          "request_timestamp": {
            "type": "string",
            "description": "The timestamp for receipt of the message."
          },
          "response_timestamp": {
            "type": "string",
            "description": "The timestamp for the system response to the message."
          },
          "workspace_id": {
            "type": "string",
            "description": "The unique identifier of the workspace where the request was made."
          },
          "language": {
            "type": "string",
            "description": "The language of the workspace where the message request was made."
          }
        },
        "required": [
          "request",
          "response",
          "log_id",
          "request_timestamp",
          "response_timestamp",
          "workspace_id",
          "language"
        ]
      },
      "LogCollection": {
        "properties": {
          "logs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Log"
            },
            "description": "An array of objects describing log events."
          },
          "pagination": {
            "$ref": "#/components/schemas/LogPagination"
          }
        },
        "required": [
          "logs",
          "pagination"
        ]
      },
      "LogMessage": {
        "type": "object",
        "description": "Log message details.",
        "properties": {
          "level": {
            "type": "string",
            "description": "The severity of the log message.",
            "enum": [
              "info",
              "error",
              "warn"
            ]
          },
          "msg": {
            "type": "string",
            "description": "The text of the log message."
          },
          "code": {
            "type": "string",
            "description": "A code that indicates the category to which the error message belongs."
          },
          "source": {
            "$ref": "#/components/schemas/LogMessageSource"
          }
        },
        "required": [
          "level",
          "msg",
          "code"
        ]
      },
      "LogMessageSource": {
        "type": "object",
        "description": "An object that identifies the dialog element that generated the error message.",
        "properties": {
          "type": {
            "type": "string",
            "description": "A string that indicates the type of dialog element that generated the error message.",
            "enum": [
              "dialog_node"
            ]
          },
          "dialog_node": {
            "type": "string",
            "description": "The unique identifier of the dialog node that generated the error message."
          }
        }
      },
      "LogPagination": {
        "description": "The pagination data for the returned objects. For more information about using pagination, see [Pagination](#pagination).",
        "properties": {
          "next_url": {
            "type": "string",
            "description": "The URL that will return the next page of results, if any."
          },
          "matched": {
            "type": "integer",
            "description": "Reserved for future use."
          },
          "next_cursor": {
            "type": "string",
            "description": "A token identifying the next page of results."
          }
        }
      },
      "Mention": {
        "type": "object",
        "description": "A mention of a contextual entity.",
        "required": [
          "entity",
          "location"
        ],
        "properties": {
          "entity": {
            "type": "string",
            "description": "The name of the entity."
          },
          "location": {
            "type": "array",
            "description": "An array of zero-based character offsets that indicate where the entity mentions begin and end in the input text.",
            "items": {
              "type": "integer"
            },
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "MessageContextMetadata": {
        "description": "Metadata related to the message.",
        "properties": {
          "deployment": {
            "type": "string",
            "minLength": 1,
            "maxLength": 256,
            "description": "A label identifying the deployment environment, used for filtering log data. This string cannot contain carriage return, newline, or tab characters."
          },
          "user_id": {
            "type": "string",
            "minLength": 1,
            "maxLength": 256,
            "description": "A string value that identifies the user who is interacting with the workspace. The client must provide a unique identifier for each individual end user who accesses the application. For user-based plans, this user ID is used to identify unique users for billing purposes. This string cannot contain carriage return, newline, or tab characters. If no value is specified in the input, **user_id** is automatically set to the value of **context.conversation_id**.\n\n**Note:** This property is the same as the **user_id** property at the root of the message body. If **user_id** is specified in both locations in a message request, the value specified at the root is used."
          }
        }
      },
      "MessageInput": {
        "description": "An input object that includes the input text.",
        "properties": {
          "text": {
            "type": "string",
            "minLength": 1,
            "maxLength": 2048,
            "description": "The text of the user input. This string cannot contain carriage return, newline, or tab characters."
          },
          "spelling_suggestions": {
            "description": "Whether to use spelling correction when processing the input. This property overrides the value of the **spelling_suggestions** property in the workspace settings.",
            "type": "boolean",
            "default": false,
            "writeOnly": true
          },
          "spelling_auto_correct": {
            "description": "Whether to use autocorrection when processing the input. If spelling correction is used and this property is `false`, any suggested corrections are returned in the **suggested_text** property of the message response. If this property is `true`, any corrections are automatically applied to the user input, and the original text is returned in the **original_text** property of the message response. This property overrides the value of the **spelling_auto_correct** property in the workspace settings.",
            "type": "boolean",
            "default": false,
            "writeOnly": true
          },
          "suggested_text": {
            "description": "Any suggested corrections of the input text. This property is returned only if spelling correction is enabled and autocorrection is disabled.",
            "type": "string",
            "readOnly": true
          },
          "original_text": {
            "description": "The original user input text. This property is returned only if autocorrection is enabled and the user input was corrected.",
            "type": "string",
            "readOnly": true
          }
        },
        "additionalProperties": {
          "description": "Any additional data included with the message input."
        },
        "x-java-builder": true
      },
      "MessageRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseMessage"
          },
          {
            "description": "A request sent to the workspace, including the user input and context.",
            "properties": {
              "input": {
                "$ref": "#/components/schemas/MessageInput"
              },
              "entities": {
                "type": "array",
                "description": "Entities to use when evaluating the message. Include entities from the previous response to continue using those entities rather than detecting entities in the new input.",
                "items": {
                  "$ref": "#/components/schemas/RuntimeEntity"
                },
                "x-item-name": "entity"
              },
              "intents": {
                "type": "array",
                "description": "Intents to use when evaluating the user input. Include intents from the previous response to continue using those intents rather than trying to recognize intents in the new input.",
                "items": {
                  "$ref": "#/components/schemas/RuntimeIntent"
                },
                "x-item-name": "intent"
              }
            }
          }
        ]
      },
      "MessageResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseMessage"
          },
          {
            "properties": {
              "input": {
                "$ref": "#/components/schemas/MessageInput"
              },
              "intents": {
                "description": "An array of intents recognized in the user input, sorted in descending order of confidence",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RuntimeIntent"
                }
              },
              "entities": {
                "description": "An array of entities identified in the user input.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RuntimeEntity"
                }
              },
              "context": {
                "$ref": "#/components/schemas/Context"
              },
              "output": {
                "$ref": "#/components/schemas/OutputData"
              }
            },
            "required": [
              "input",
              "intents",
              "entities",
              "context",
              "output",
              "user_id"
            ]
          }
        ],
        "description": "The response sent by the workspace, including the output text, detected intents and entities, and context."
      },
      "OutputData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseOutput"
          },
          {
            "properties": {
              "log_messages": {
                "type": "array",
                "description": "An array of up to 50 messages logged with the request.",
                "items": {
                  "$ref": "#/components/schemas/LogMessage"
                }
              },
              "generic": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RuntimeResponseGeneric"
                },
                "description": "Output intended for any channel. It is the responsibility of the client application to implement the supported response types."
              }
            },
            "required": [
              "log_messages",
              "text"
            ]
          }
        ]
      },
      "Pagination": {
        "description": "The pagination data for the returned objects. For more information about using pagination, see [Pagination](#pagination).",
        "properties": {
          "refresh_url": {
            "type": "string",
            "description": "The URL that will return the same page of results."
          },
          "next_url": {
            "type": "string",
            "description": "The URL that will return the next page of results."
          },
          "total": {
            "type": "integer",
            "description": "The total number of objects that satisfy the request. This total includes all results, not just those included in the current page."
          },
          "matched": {
            "type": "integer",
            "description": "Reserved for future use."
          },
          "refresh_cursor": {
            "type": "string",
            "description": "A token identifying the current page of results."
          },
          "next_cursor": {
            "type": "string",
            "description": "A token identifying the next page of results."
          }
        },
        "required": [
          "refresh_url"
        ]
      },
      "ResponseGenericChannel": {
        "properties": {
          "channel": {
            "type": "string",
            "description": "A channel for which the response is intended. \n\n **Note:** On IBM Cloud Pak for Data, only `chat` is supported.",
            "enum": [
              "chat",
              "facebook",
              "intercom",
              "slack",
              "text_messaging",
              "voice_telephony",
              "whatsapp"
            ]
          }
        }
      },
      "RuntimeEntity": {
        "description": "A term from the request that was identified as an entity.",
        "type": "object",
        "required": [
          "entity",
          "value"
        ],
        "properties": {
          "entity": {
            "type": "string",
            "description": "An entity detected in the input."
          },
          "location": {
            "type": "array",
            "description": "An array of zero-based character offsets that indicate where the detected entity values begin and end in the input text.",
            "items": {
              "type": "integer"
            },
            "maxItems": 2,
            "minItems": 2
          },
          "value": {
            "type": "string",
            "description": "The entity value that was recognized in the user input."
          },
          "confidence": {
            "type": "number",
            "description": "A decimal percentage that represents Watson's confidence in the recognized entity."
          },
          "groups": {
            "type": "array",
            "description": "The recognized capture groups for the entity, as defined by the entity pattern.",
            "items": {
              "$ref": "#/components/schemas/CaptureGroup"
            }
          },
          "interpretation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RuntimeEntityInterpretation"
              },
              {
                "description": "An object containing detailed information about the entity recognized in the user input.\n\nFor more information about how system entities are interpreted, see the [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-system-entities)."
              }
            ]
          },
          "alternatives": {
            "type": "array",
            "description": "An array of possible alternative values that the user might have intended instead of the value returned in the **value** property. This property is returned only for `@sys-time` and `@sys-date` entities when the user's input is ambiguous.\n\nThis property is included only if the new system entities are enabled for the workspace.",
            "items": {
              "$ref": "#/components/schemas/RuntimeEntityAlternative"
            }
          },
          "role": {
            "$ref": "#/components/schemas/RuntimeEntityRole"
          }
        },
        "example": {
          "entity": "appliance",
          "location": [
            12,
            18
          ],
          "value": "light",
          "metadata": {}
        }
      },
      "RuntimeEntityAlternative": {
        "type": "object",
        "description": "An alternative value for the recognized entity.",
        "properties": {
          "value": {
            "type": "string",
            "description": "The entity value that was recognized in the user input."
          },
          "confidence": {
            "type": "number",
            "description": "A decimal percentage that represents Watson's confidence in the recognized entity."
          }
        }
      },
      "RuntimeEntityInterpretation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RuntimeEntityInterpretationSysDate"
          },
          {
            "$ref": "#/components/schemas/RuntimeEntityInterpretationSysNumber"
          },
          {
            "$ref": "#/components/schemas/RuntimeEntityInterpretationSysTime"
          }
        ]
      },
      "RuntimeEntityInterpretationSysDate": {
        "properties": {
          "calendar_type": {
            "type": "string",
            "description": "The calendar used to represent a recognized date (for example, `Gregorian`)."
          },
          "datetime_link": {
            "type": "string",
            "description": "A unique identifier used to associate a time and date. If the user input contains a date and time that are mentioned together (for example, `Today at 5`, the same **datetime_link** value is returned for both the `@sys-date` and `@sys-time` entities)."
          },
          "festival": {
            "type": "string",
            "description": "A locale-specific holiday name (such as `thanksgiving` or `christmas`). This property is included when a `@sys-date` entity is recognized based on a holiday name in the user input."
          },
          "granularity": {
            "type": "string",
            "description": "The precision or duration of a time range specified by a recognized `@sys-time` or `@sys-date` entity.",
            "enum": [
              "day",
              "fortnight",
              "hour",
              "instant",
              "minute",
              "month",
              "quarter",
              "second",
              "week",
              "weekend",
              "year"
            ]
          },
          "range_link": {
            "type": "string",
            "description": "A unique identifier used to associate multiple recognized `@sys-date`, `@sys-time`, or `@sys-number` entities that are recognized as a range of values in the user's input (for example, `from July 4 until July 14` or `from 20 to 25`)."
          },
          "range_modifier": {
            "type": "string",
            "description": "The word in the user input that indicates that a `sys-date` or `sys-time` entity is part of an implied range where only one date or time is specified (for example, `since` or `until`)."
          },
          "relative_day": {
            "type": "number",
            "description": "A recognized mention of a relative day, represented numerically as an offset from the current date (for example, `-1` for `yesterday` or `10` for `in ten days`)."
          },
          "relative_month": {
            "type": "number",
            "description": "A recognized mention of a relative month, represented numerically as an offset from the current month (for example, `1` for `next month` or `-3` for `three months ago`)."
          },
          "relative_week": {
            "type": "number",
            "description": "A recognized mention of a relative week, represented numerically as an offset from the current week (for example, `2` for `in two weeks` or `-1` for `last week)."
          },
          "relative_weekend": {
            "type": "number",
            "description": "A recognized mention of a relative date range for a weekend, represented numerically as an offset from the current weekend (for example, `0` for `this weekend` or `-1` for `last weekend`)."
          },
          "relative_year": {
            "type": "number",
            "description": "A recognized mention of a relative year, represented numerically as an offset from the current year (for example, `1` for `next year` or `-5` for `five years ago`)."
          },
          "specific_day": {
            "type": "number",
            "description": "A recognized mention of a specific date, represented numerically as the date within the month (for example, `30` for `June 30`.)"
          },
          "specific_day_of_week": {
            "type": "string",
            "description": "A recognized mention of a specific day of the week as a lowercase string (for example, `monday`)."
          },
          "specific_month": {
            "type": "number",
            "description": "A recognized mention of a specific month, represented numerically (for example, `7` for `July`)."
          },
          "specific_quarter": {
            "type": "number",
            "description": "A recognized mention of a specific quarter, represented numerically (for example, `3` for `the third quarter`)."
          },
          "specific_year": {
            "type": "number",
            "description": "A recognized mention of a specific year (for example, `2016`)."
          }
        }
      },
      "RuntimeEntityInterpretationSysNumber": {
        "properties": {
          "numeric_value": {
            "type": "number",
            "description": "A recognized numeric value, represented as an integer or double."
          },
          "range_link": {
            "type": "string",
            "description": "A unique identifier used to associate multiple recognized `@sys-date`, `@sys-time`, or `@sys-number` entities that are recognized as a range of values in the user's input (for example, `from July 4 until July 14` or `from 20 to 25`)."
          },
          "subtype": {
            "type": "string",
            "description": "The type of numeric value recognized in the user input (`integer` or `rational`)."
          }
        }
      },
      "RuntimeEntityInterpretationSysTime": {
        "properties": {
          "datetime_link": {
            "type": "string",
            "description": "A unique identifier used to associate a recognized time and date. If the user input contains a date and time that are mentioned together (for example, `Today at 5`, the same **datetime_link** value is returned for both the `@sys-date` and `@sys-time` entities)."
          },
          "granularity": {
            "type": "string",
            "description": "The precision or duration of a time range specified by a recognized `@sys-time` or `@sys-date` entity.",
            "enum": [
              "day",
              "fortnight",
              "hour",
              "instant",
              "minute",
              "month",
              "quarter",
              "second",
              "week",
              "weekend",
              "year"
            ]
          },
          "part_of_day": {
            "type": "string",
            "description": "A recognized term for a time that was mentioned as a part of the day in the user's input (for example, `morning` or `afternoon`)."
          },
          "range_link": {
            "type": "string",
            "description": "A unique identifier used to associate multiple recognized `@sys-date`, `@sys-time`, or `@sys-number` entities that are recognized as a range of values in the user's input (for example, `from July 4 until July 14` or `from 20 to 25`)."
          },
          "relative_hour": {
            "type": "number",
            "description": "A recognized mention of a relative hour, represented numerically as an offset from the current hour (for example, `3` for `in three hours` or `-1` for `an hour ago`)."
          },
          "relative_minute": {
            "type": "number",
            "description": "A recognized mention of a relative time, represented numerically as an offset in minutes from the current time (for example, `5` for `in five minutes` or `-15` for `fifteen minutes ago`)."
          },
          "relative_second": {
            "type": "number",
            "description": "A recognized mention of a relative time, represented numerically as an offset in seconds from the current time (for example, `10` for `in ten seconds` or `-30` for `thirty seconds ago`)."
          },
          "specific_hour": {
            "type": "number",
            "description": "A recognized specific hour mentioned as part of a time value (for example, `10` for `10:15 AM`.)"
          },
          "specific_minute": {
            "type": "number",
            "description": "A recognized specific minute mentioned as part of a time value (for example, `15` for `10:15 AM`.)"
          },
          "specific_second": {
            "type": "number",
            "description": "A recognized specific second mentioned as part of a time value (for example, `30` for `10:15:30 AM`.)"
          },
          "timezone": {
            "type": "string",
            "description": "A recognized time zone mentioned as part of a time value (for example, `EST`)."
          }
        }
      },
      "RuntimeEntityRole": {
        "description": "An object describing the role played by a system entity that is specifies the beginning or end of a range recognized in the user input. This property is included only if the new system entities are enabled for the workspace.",
        "properties": {
          "type": {
            "type": "string",
            "description": "The relationship of the entity to the range.",
            "enum": [
              "date_from",
              "date_to",
              "number_from",
              "number_to",
              "time_from",
              "time_to"
            ]
          }
        }
      },
      "RuntimeIntent": {
        "type": "object",
        "description": "An intent identified in the user input.",
        "required": [
          "intent"
        ],
        "properties": {
          "intent": {
            "type": "string",
            "description": "The name of the recognized intent."
          },
          "confidence": {
            "type": "number",
            "format": "double",
            "description": "A decimal percentage that represents Watson's confidence in the intent. If you are specifying an intent as part of a request, but you do not have a calculated confidence value, specify `1`."
          }
        }
      },
      "RuntimeResponseGeneric": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/RuntimeResponseTypeText"
          },
          {
            "$ref": "#/components/schemas/RuntimeResponseTypePause"
          },
          {
            "$ref": "#/components/schemas/RuntimeResponseTypeImage"
          },
          {
            "$ref": "#/components/schemas/RuntimeResponseTypeOption"
          },
          {
            "$ref": "#/components/schemas/RuntimeResponseTypeConnectToAgent"
          },
          {
            "$ref": "#/components/schemas/RuntimeResponseTypeSuggestion"
          },
          {
            "$ref": "#/components/schemas/RuntimeResponseTypeChannelTransfer"
          },
          {
            "$ref": "#/components/schemas/RuntimeResponseTypeUserDefined"
          },
          {
            "$ref": "#/components/schemas/RuntimeResponseTypeVideo"
          },
          {
            "$ref": "#/components/schemas/RuntimeResponseTypeAudio"
          },
          {
            "$ref": "#/components/schemas/RuntimeResponseTypeIframe"
          }
        ],
        "discriminator": {
          "propertyName": "response_type",
          "mapping": {
            "audio": "#/components/schemas/RuntimeResponseTypeAudio",
            "channel_transfer": "#/components/schemas/RuntimeResponseTypeChannelTransfer",
            "connect_to_agent": "#/components/schemas/RuntimeResponseTypeConnectToAgent",
            "iframe": "#/components/schemas/RuntimeResponseTypeIframe",
            "image": "#/components/schemas/RuntimeResponseTypeImage",
            "option": "#/components/schemas/RuntimeResponseTypeOption",
            "suggestion": "#/components/schemas/RuntimeResponseTypeSuggestion",
            "pause": "#/components/schemas/RuntimeResponseTypePause",
            "text": "#/components/schemas/RuntimeResponseTypeText",
            "user_defined": "#/components/schemas/RuntimeResponseTypeUserDefined",
            "video": "#/components/schemas/RuntimeResponseTypeVideo"
          }
        }
      },
      "RuntimeResponseTypeAudio": {
        "properties": {
          "response_type": {
            "type": "string",
            "description": "The type of response returned by the dialog node. The specified response type must be supported by the client application or channel."
          },
          "source": {
            "type": "string",
            "description": "The `https:` URL of the audio clip."
          },
          "title": {
            "type": "string",
            "description": "The title or introductory text to show before the response."
          },
          "description": {
            "type": "string",
            "description": "The description to show with the response."
          },
          "channels": {
            "description": "An array of objects specifying channels for which the response is intended. If **channels** is present, the response is intended for a built-in integration and should not be handled by an API client.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseGenericChannel"
            }
          },
          "channel_options": {
            "type": "object",
            "description": "For internal use only."
          },
          "alt_text": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "Descriptive text that can be used for screen readers or other situations where the audio player cannot be seen."
          }
        },
        "required": [
          "response_type",
          "source"
        ]
      },
      "RuntimeResponseTypeChannelTransfer": {
        "properties": {
          "response_type": {
            "type": "string",
            "description": "The type of response returned by the dialog node. The specified response type must be supported by the client application or channel. \n\n **Note:** The `channel_transfer` response type is not supported on IBM Cloud Pak for Data."
          },
          "message_to_user": {
            "type": "string",
            "description": "The message to display to the user when initiating a channel transfer."
          },
          "transfer_info": {
            "$ref": "#/components/schemas/ChannelTransferInfo"
          },
          "channels": {
            "description": "An array of objects specifying channels for which the response is intended. If **channels** is present, the response is intended only for a built-in integration and should not be handled by an API client.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseGenericChannel"
            },
            "minItems": 1
          }
        },
        "required": [
          "response_type",
          "message_to_user",
          "transfer_info"
        ]
      },
      "RuntimeResponseTypeConnectToAgent": {
        "properties": {
          "response_type": {
            "type": "string",
            "description": "The type of response returned by the dialog node. The specified response type must be supported by the client application or channel."
          },
          "message_to_human_agent": {
            "type": "string",
            "description": "A message to be sent to the human agent who will be taking over the conversation."
          },
          "agent_available": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AgentAvailabilityMessage"
              },
              {
                "description": "An optional message to be displayed to the user to indicate that the conversation will be transferred to the next available agent."
              }
            ]
          },
          "agent_unavailable": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AgentAvailabilityMessage"
              },
              {
                "description": "An optional message to be displayed to the user to indicate that no online agent is available to take over the conversation."
              }
            ]
          },
          "transfer_info": {
            "$ref": "#/components/schemas/DialogNodeOutputConnectToAgentTransferInfo"
          },
          "topic": {
            "type": "string",
            "description": "A label identifying the topic of the conversation, derived from the **title** property of the relevant node or the **topic** property of the dialog node response."
          },
          "dialog_node": {
            "type": "string",
            "description": "The unique ID of the dialog node that the **topic** property is taken from. The **topic** property is populated using the value of the dialog node's **title** property."
          },
          "channels": {
            "description": "An array of objects specifying channels for which the response is intended. If **channels** is present, the response is intended for a built-in integration and should not be handled by an API client.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseGenericChannel"
            }
          }
        },
        "required": [
          "response_type"
        ]
      },
      "RuntimeResponseTypeIframe": {
        "properties": {
          "response_type": {
            "type": "string",
            "description": "The type of response returned by the dialog node. The specified response type must be supported by the client application or channel."
          },
          "source": {
            "type": "string",
            "description": "The `https:` URL of the embeddable content."
          },
          "title": {
            "type": "string",
            "description": "The title or introductory text to show before the response."
          },
          "description": {
            "type": "string",
            "description": "The description to show with the response."
          },
          "image_url": {
            "type": "string",
            "description": "The URL of an image that shows a preview of the embedded content."
          },
          "channels": {
            "description": "An array of objects specifying channels for which the response is intended. If **channels** is present, the response is intended for a built-in integration and should not be handled by an API client.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseGenericChannel"
            }
          }
        },
        "required": [
          "response_type",
          "source"
        ]
      },
      "RuntimeResponseTypeImage": {
        "properties": {
          "response_type": {
            "type": "string",
            "description": "The type of response returned by the dialog node. The specified response type must be supported by the client application or channel."
          },
          "source": {
            "type": "string",
            "description": "The `https:` URL of the image."
          },
          "title": {
            "type": "string",
            "description": "The title or introductory text to show before the response."
          },
          "description": {
            "type": "string",
            "description": "The description to show with the response."
          },
          "channels": {
            "description": "An array of objects specifying channels for which the response is intended. If **channels** is present, the response is intended for a built-in integration and should not be handled by an API client.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseGenericChannel"
            }
          },
          "alt_text": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "Descriptive text that can be used for screen readers or other situations where the image cannot be seen."
          }
        },
        "required": [
          "response_type",
          "source"
        ]
      },
      "RuntimeResponseTypeOption": {
        "properties": {
          "response_type": {
            "type": "string",
            "description": "The type of response returned by the dialog node. The specified response type must be supported by the client application or channel."
          },
          "title": {
            "type": "string",
            "description": "The title or introductory text to show before the response."
          },
          "description": {
            "type": "string",
            "description": "The description to show with the response."
          },
          "preference": {
            "type": "string",
            "description": "The preferred type of control to display.",
            "enum": [
              "dropdown",
              "button"
            ]
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DialogNodeOutputOptionsElement"
            },
            "description": "An array of objects describing the options from which the user can choose."
          },
          "channels": {
            "description": "An array of objects specifying channels for which the response is intended. If **channels** is present, the response is intended for a built-in integration and should not be handled by an API client.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseGenericChannel"
            }
          }
        },
        "required": [
          "response_type",
          "options",
          "title"
        ]
      },
      "RuntimeResponseTypePause": {
        "properties": {
          "response_type": {
            "type": "string",
            "description": "The type of response returned by the dialog node. The specified response type must be supported by the client application or channel."
          },
          "time": {
            "type": "integer",
            "description": "How long to pause, in milliseconds."
          },
          "typing": {
            "type": "boolean",
            "description": "Whether to send a \"user is typing\" event during the pause."
          },
          "channels": {
            "description": "An array of objects specifying channels for which the response is intended. If **channels** is present, the response is intended for a built-in integration and should not be handled by an API client.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseGenericChannel"
            }
          }
        },
        "required": [
          "response_type",
          "time"
        ]
      },
      "RuntimeResponseTypeSuggestion": {
        "properties": {
          "response_type": {
            "type": "string",
            "description": "The type of response returned by the dialog node. The specified response type must be supported by the client application or channel."
          },
          "title": {
            "type": "string",
            "description": "The title or introductory text to show before the response."
          },
          "suggestions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DialogSuggestion"
            },
            "description": "An array of objects describing the possible matching dialog nodes from which the user can choose."
          },
          "channels": {
            "description": "An array of objects specifying channels for which the response is intended. If **channels** is present, the response is intended for a built-in integration and should not be handled by an API client.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseGenericChannel"
            }
          }
        },
        "required": [
          "response_type",
          "title",
          "suggestions"
        ]
      },
      "RuntimeResponseTypeText": {
        "properties": {
          "response_type": {
            "type": "string",
            "description": "The type of response returned by the dialog node. The specified response type must be supported by the client application or channel."
          },
          "text": {
            "type": "string",
            "description": "The text of the response."
          },
          "channels": {
            "description": "An array of objects specifying channels for which the response is intended. If **channels** is present, the response is intended for a built-in integration and should not be handled by an API client.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseGenericChannel"
            }
          }
        },
        "required": [
          "response_type",
          "text"
        ]
      },
      "RuntimeResponseTypeUserDefined": {
        "properties": {
          "response_type": {
            "type": "string",
            "description": "The type of response returned by the dialog node. The specified response type must be supported by the client application or channel."
          },
          "user_defined": {
            "type": "object",
            "description": "An object containing any properties for the user-defined response type.",
            "additionalProperties": {
              "description": "Any property used by the user-defined response type."
            }
          },
          "channels": {
            "description": "An array of objects specifying channels for which the response is intended. If **channels** is present, the response is intended for a built-in integration and should not be handled by an API client.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseGenericChannel"
            }
          }
        },
        "required": [
          "response_type",
          "user_defined"
        ]
      },
      "RuntimeResponseTypeVideo": {
        "properties": {
          "response_type": {
            "type": "string",
            "description": "The type of response returned by the dialog node. The specified response type must be supported by the client application or channel."
          },
          "source": {
            "type": "string",
            "description": "The `https:` URL of the video."
          },
          "title": {
            "type": "string",
            "description": "The title or introductory text to show before the response."
          },
          "description": {
            "type": "string",
            "description": "The description to show with the response."
          },
          "channels": {
            "description": "An array of objects specifying channels for which the response is intended. If **channels** is present, the response is intended for a built-in integration and should not be handled by an API client.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseGenericChannel"
            }
          },
          "channel_options": {
            "type": "object",
            "description": "For internal use only."
          },
          "alt_text": {
            "type": "string",
            "minLength": 1,
            "maxLength": 100,
            "description": "Descriptive text that can be used for screen readers or other situations where the video cannot be seen."
          }
        },
        "required": [
          "response_type",
          "source"
        ]
      },
      "StatusError": {
        "description": "An object describing an error that occurred during processing of an asynchronous operation.",
        "properties": {
          "message": {
            "type": "string",
            "description": "The text of the error message."
          }
        }
      },
      "Synonym": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseSynonym"
          },
          {
            "properties": {
              "synonym": {
                "type": "string",
                "minLength": 1,
                "maxLength": 64,
                "description": "The text of the synonym. This string must conform to the following restrictions:\n- It cannot contain carriage return, newline, or tab characters.\n- It cannot consist of only whitespace characters."
              }
            },
            "required": [
              "synonym"
            ]
          }
        ],
        "x-java-builder": true
      },
      "SynonymCollection": {
        "properties": {
          "synonyms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Synonym"
            },
            "description": "An array of synonyms."
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "required": [
          "synonyms",
          "pagination"
        ]
      },
      "SystemResponse": {
        "type": "object",
        "description": "For internal use only.",
        "additionalProperties": {
          "description": "For internal use only."
        }
      },
      "UpdateCounterexample": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseCounterexample"
          }
        ]
      },
      "UpdateDialogNode": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseDialogNode"
          }
        ]
      },
      "UpdateEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseEntity"
          },
          {
            "properties": {
              "values": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateValue"
                },
                "description": "An array of objects describing the entity values.",
                "x-item-name": "value"
              }
            }
          }
        ]
      },
      "UpdateExample": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseExample"
          }
        ]
      },
      "UpdateIntent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseIntent"
          },
          {
            "properties": {
              "examples": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Example"
                },
                "description": "An array of user input examples for the intent.",
                "x-item-name": "example"
              }
            }
          }
        ]
      },
      "UpdateSynonym": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseSynonym"
          }
        ]
      },
      "UpdateValue": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseValue"
          }
        ]
      },
      "UpdateWorkspace": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateWorkspace"
          }
        ]
      },
      "Value": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateValue"
          },
          {
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "synonyms",
                  "patterns"
                ],
                "description": "Specifies the type of entity value."
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "ValueCollection": {
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Value"
            },
            "description": "An array of entity values."
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "required": [
          "values",
          "pagination"
        ]
      },
      "Webhook": {
        "description": "A webhook that can be used by dialog nodes to make programmatic calls to an external function.\n\n**Note:** Currently, only a single webhook named `main_webhook` is supported.",
        "properties": {
          "url": {
            "type": "string",
            "description": "The URL for the external service or application to which you want to send HTTP POST requests."
          },
          "name": {
            "type": "string",
            "description": "The name of the webhook. Currently, `main_webhook` is the only supported value."
          },
          "headers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookHeader"
            },
            "description": "An optional array of HTTP headers to pass with the HTTP request."
          }
        },
        "required": [
          "url",
          "name"
        ]
      },
      "WebhookHeader": {
        "description": "A key/value pair defining an HTTP header and a value.",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of an HTTP header (for example, `Authorization`)."
          },
          "value": {
            "type": "string",
            "description": "The value of an HTTP header."
          }
        },
        "required": [
          "name",
          "value"
        ]
      },
      "Workspace": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseWorkspace"
          },
          {
            "$ref": "#/components/schemas/WorkspaceReference"
          },
          {
            "properties": {
              "intents": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Intent"
                },
                "description": "An array of intents.",
                "x-item-name": "intent"
              },
              "entities": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Entity"
                },
                "description": "An array of objects describing the entities for the workspace.",
                "x-item-name": "entity"
              },
              "counts": {
                "$ref": "#/components/schemas/WorkspaceCounts"
              }
            },
            "required": [
              "name",
              "language",
              "learning_opt_out",
              "workspace_id"
            ]
          }
        ]
      },
      "WorkspaceCollection": {
        "properties": {
          "workspaces": {
            "type": "array",
            "description": "An array of objects describing the workspaces associated with the service instance.",
            "items": {
              "$ref": "#/components/schemas/Workspace"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        },
        "required": [
          "workspaces",
          "pagination"
        ]
      },
      "WorkspaceCounts": {
        "description": "An object containing properties that indicate how many intents, entities, and dialog nodes are defined in the workspace. This property is included only in responses from the **Export workspace asynchronously** method, and only when the **verbose** query parameter is set to `true`.",
        "properties": {
          "intent": {
            "type": "integer",
            "description": "The number of intents defined in the workspace."
          },
          "entity": {
            "type": "integer",
            "description": "The number of entities defined in the workspace."
          },
          "node": {
            "type": "integer",
            "description": "The number of nodes defined in the workspace."
          }
        },
        "readOnly": true
      },
      "WorkspaceReference": {
        "properties": {
          "metadata": {
            "type": "object",
            "description": "Any metadata related to the workspace.",
            "additionalProperties": {
              "description": "Any metadata value."
            }
          },
          "learning_opt_out": {
            "type": "boolean",
            "default": false,
            "description": "Whether training data from the workspace (including artifacts such as intents and entities) can be used by IBM for general service improvements. `true` indicates that workspace training data is not to be used."
          },
          "system_settings": {
            "$ref": "#/components/schemas/WorkspaceSystemSettings"
          },
          "status": {
            "type": "string",
            "readOnly": true,
            "description": "The current status of the workspace: \n - **Available**: The workspace is available and ready to process messages. \n - **Failed**: An asynchronous operation has failed. See the **status_errors** property for more information about the cause of the failure. \n - **Non Existent**: The workspace does not exist. \n - **Processing**: An asynchronous operation has not yet completed. \n - **Training**: The workspace is training based on new data such as intents or examples.",
            "enum": [
              "Available",
              "Failed",
              "Non Existent",
              "Processing",
              "Training",
              "Unavailable"
            ]
          },
          "status_errors": {
            "type": "array",
            "readOnly": true,
            "description": "An array of messages about errors that caused an asynchronous operation to fail.",
            "items": {
              "$ref": "#/components/schemas/StatusError"
            }
          },
          "webhooks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Webhook"
            }
          }
        }
      },
      "WorkspaceSystemSettings": {
        "description": "Global settings for the workspace.",
        "properties": {
          "tooling": {
            "$ref": "#/components/schemas/WorkspaceSystemSettingsTooling"
          },
          "disambiguation": {
            "$ref": "#/components/schemas/WorkspaceSystemSettingsDisambiguation"
          },
          "human_agent_assist": {
            "description": "For internal use only.",
            "type": "object",
            "additionalProperties": {
              "description": "For internal use only."
            }
          },
          "spelling_suggestions": {
            "description": "Whether spelling correction is enabled for the workspace.",
            "type": "boolean",
            "default": false
          },
          "spelling_auto_correct": {
            "description": "Whether autocorrection is enabled for the workspace. If spelling correction is enabled and this property is `false`, any suggested corrections are returned in the **suggested_text** property of the message response. If this property is `true`, any corrections are automatically applied to the user input, and the original text is returned in the **original_text** property of the message response.",
            "type": "boolean",
            "default": false
          },
          "system_entities": {
            "$ref": "#/components/schemas/WorkspaceSystemSettingsSystemEntities"
          },
          "off_topic": {
            "$ref": "#/components/schemas/WorkspaceSystemSettingsOffTopic"
          },
          "auto_learn": {
            "$ref": "#/components/schemas/WorkspaceSystemSettingsAutoLearn"
          },
          "nlp": {
            "$ref": "#/components/schemas/WorkspaceSystemSettingsNlp"
          }
        },
        "additionalProperties": {
          "description": "For internal use only."
        }
      },
      "WorkspaceSystemSettingsAutoLearn": {
        "description": "For internal use only.",
        "type": "object",
        "readOnly": true,
        "x-sdk-exclude": true
      },
      "WorkspaceSystemSettingsDisambiguation": {
        "description": "Workspace settings related to the disambiguation feature.",
        "properties": {
          "prompt": {
            "type": "string",
            "description": "The text of the introductory prompt that accompanies disambiguation options presented to the user."
          },
          "none_of_the_above_prompt": {
            "type": "string",
            "description": "The user-facing label for the option users can select if none of the suggested options is correct. If no value is specified for this property, this option does not appear."
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the disambiguation feature is enabled for the workspace.",
            "default": false
          },
          "sensitivity": {
            "type": "string",
            "enum": [
              "auto",
              "high",
              "medium_high",
              "medium",
              "medium_low",
              "low"
            ],
            "default": "auto",
            "description": "The sensitivity of the disambiguation feature to intent detection uncertainty. Higher sensitivity means that the disambiguation feature is triggered more often and includes more choices."
          },
          "randomize": {
            "type": "boolean",
            "description": "Whether the order in which disambiguation suggestions are presented should be randomized (but still influenced by relative confidence)."
          },
          "max_suggestions": {
            "type": "integer",
            "description": "The maximum number of disambigation suggestions that can be included in a `suggestion` response.",
            "minimum": 1,
            "maximum": 5
          },
          "suggestion_text_policy": {
            "type": "string",
            "description": "For internal use only."
          }
        }
      },
      "WorkspaceSystemSettingsNlp": {
        "description": "Workspace settings related to the version of the training algorithms currently used by the skill.",
        "properties": {
          "model": {
            "type": "string",
            "description": "The policy the skill follows for selecting the algorithm version to use. For more information, see the [documentation](/docs/watson-assistant?topic=watson-assistant-algorithm-version). \n\n On IBM Cloud, you can specify `latest`, `previous`, or `beta`. \n\n On IBM Cloud Pak for Data, you can specify either `beta` or the date of the version you want to use, in `YYYY-MM-DD` format."
          }
        }
      },
      "WorkspaceSystemSettingsOffTopic": {
        "description": "Workspace settings related to detection of irrelevant input.",
        "properties": {
          "enabled": {
            "type": "boolean",
            "default": false,
            "description": "Whether enhanced irrelevance detection is enabled for the workspace."
          }
        }
      },
      "WorkspaceSystemSettingsSystemEntities": {
        "description": "Workspace settings related to the behavior of system entities.",
        "properties": {
          "enabled": {
            "type": "boolean",
            "default": false,
            "description": "Whether the new system entities are enabled for the workspace."
          }
        }
      },
      "WorkspaceSystemSettingsTooling": {
        "description": "Workspace settings related to the Watson Assistant user interface.",
        "properties": {
          "store_generic_responses": {
            "type": "boolean",
            "description": "Whether the dialog JSON editor displays text responses within the `output.generic` object."
          }
        }
      }
    }
  }
}